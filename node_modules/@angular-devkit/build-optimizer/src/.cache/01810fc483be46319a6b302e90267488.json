{"remainingRequest":"/home/agile/Hairfolio_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/agile/Hairfolio_website/node_modules/ngx-drag-scroll/lib/ngx-drag-scroll.js","dependencies":[{"path":"/home/agile/Hairfolio_website/node_modules/ngx-drag-scroll/lib/ngx-drag-scroll.js","mtime":1539672760000},{"path":"/home/agile/Hairfolio_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/agile/Hairfolio_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ElementRef, Component, Renderer2, Input, Output, EventEmitter, ViewChild, ContentChildren } from '@angular/core';\nimport { DragScrollItemDirective } from './ngx-drag-scroll-item';\nvar DragScrollComponent = /*@__PURE__*/ (function () {\n    function DragScrollComponent(_elementRef, _renderer) {\n        this._elementRef = _elementRef;\n        this._renderer = _renderer;\n        this._index = 0;\n        this._scrollbarHidden = false;\n        this._disabled = false;\n        this._xDisabled = false;\n        this._yDisabled = false;\n        this._dragDisabled = false;\n        this._snapDisabled = false;\n        this._snapOffset = 0;\n        this._snapDuration = 500;\n        this.isPressed = false;\n        this.isScrolling = false;\n        this.scrollTimer = -1;\n        this.scrollToTimer = -1;\n        this.downX = 0;\n        this.downY = 0;\n        this.displayType = 'block';\n        this.elWidth = null;\n        this.elHeight = null;\n        this.scrollbarWidth = null;\n        this.isAnimating = false;\n        this.scrollReachesRightEnd = false;\n        this.prevChildrenLength = 0;\n        this.indexChanged = new EventEmitter();\n        this.reachesLeftBound = new EventEmitter();\n        this.reachesRightBound = new EventEmitter();\n        this.snapAnimationFinished = new EventEmitter();\n        this.scrollbarWidth = this.getScrollbarWidth() + \"px\";\n    }\n    Object.defineProperty(DragScrollComponent.prototype, \"currIndex\", {\n        get: function () { return this._index; },\n        set: function (value) {\n            if (value !== this._index) {\n                this._index = value;\n                this.indexChanged.emit(value);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"scrollbarHidden\", {\n        get: function () { return this._scrollbarHidden; },\n        set: function (value) { this._scrollbarHidden = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"disabled\", {\n        get: function () { return this._disabled; },\n        set: function (value) { this._disabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"xDisabled\", {\n        get: function () { return this._xDisabled; },\n        set: function (value) { this._xDisabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"yDisabled\", {\n        get: function () { return this._yDisabled; },\n        set: function (value) { this._yDisabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"dragDisabled\", {\n        get: function () { return this._dragDisabled; },\n        set: function (value) { this._dragDisabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"snapDisabled\", {\n        get: function () { return this._snapDisabled; },\n        set: function (value) { this._snapDisabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"snapOffset\", {\n        get: function () { return this._snapOffset; },\n        set: function (value) { this._snapOffset = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DragScrollComponent.prototype, \"snapDuration\", {\n        get: function () { return this._snapDuration; },\n        set: function (value) { this._snapDuration = value; },\n        enumerable: true,\n        configurable: true\n    });\n    DragScrollComponent.prototype.ngOnChanges = function () {\n        this.setScrollBar();\n        if (this.xDisabled || this.disabled) {\n            this.disableScroll('x');\n        }\n        else {\n            this.enableScroll('x');\n        }\n        if (this.yDisabled || this.disabled) {\n            this.disableScroll('y');\n        }\n        else {\n            this.enableScroll('y');\n        }\n    };\n    DragScrollComponent.prototype.ngAfterViewInit = function () {\n        this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'true');\n        this.displayType = window.getComputedStyle(this._elementRef.nativeElement).display;\n        this._renderer.setStyle(this._contentRef.nativeElement, 'display', this.displayType);\n        this._renderer.setStyle(this._contentRef.nativeElement, 'whiteSpace', 'noWrap');\n        this.markElDimension();\n        this._renderer.setStyle(this._contentRef.nativeElement, 'width', this.elWidth);\n        this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.elHeight);\n        if (this.wrapper) {\n            this.checkScrollbar();\n        }\n        this._renderer.listen(this._contentRef.nativeElement, 'mousedown', this.onMouseDownHandler.bind(this));\n        this._renderer.listen(this._contentRef.nativeElement, 'scroll', this.onScrollHandler.bind(this));\n        this._renderer.listen('document', 'mousemove', this.onMouseMoveHandler.bind(this));\n        this._renderer.listen('document', 'mouseup', this.onMouseUpHandler.bind(this));\n        this._renderer.listen('document', 'dragstart', function (e) {\n            e.preventDefault();\n        });\n        this.checkNavStatus();\n    };\n    DragScrollComponent.prototype.ngAfterViewChecked = function () {\n        if (this._children['_results'].length !== this.prevChildrenLength) {\n            this.markElDimension();\n            this.checkScrollbar();\n            this.prevChildrenLength = this._children['_results'].length;\n            this.checkNavStatus();\n        }\n    };\n    DragScrollComponent.prototype.ngOnDestroy = function () {\n        this._renderer.setAttribute(this._contentRef.nativeElement, 'drag-scroll', 'false');\n    };\n    DragScrollComponent.prototype.onMouseMoveHandler = function (event) {\n        if (this.isPressed && !this.disabled) {\n            if (!this.xDisabled && !this.dragDisabled) {\n                this._contentRef.nativeElement.scrollLeft =\n                    this._contentRef.nativeElement.scrollLeft - event.clientX + this.downX;\n                this.downX = event.clientX;\n            }\n            if (!this.yDisabled && !this.dragDisabled) {\n                this._contentRef.nativeElement.scrollTop =\n                    this._contentRef.nativeElement.scrollTop - event.clientY + this.downY;\n                this.downY = event.clientY;\n            }\n        }\n    };\n    DragScrollComponent.prototype.onMouseDownHandler = function (event) {\n        this.isPressed = true;\n        this.downX = event.clientX;\n        this.downY = event.clientY;\n        clearTimeout(this.scrollToTimer);\n    };\n    DragScrollComponent.prototype.onScrollHandler = function () {\n        var _this = this;\n        var scrollLeftPos = this._contentRef.nativeElement.scrollLeft + this._contentRef.nativeElement.offsetWidth;\n        if (scrollLeftPos >= this._contentRef.nativeElement.scrollWidth) {\n            this.scrollReachesRightEnd = true;\n        }\n        else {\n            this.scrollReachesRightEnd = false;\n        }\n        this.checkNavStatus();\n        if (!this.isPressed && !this.isAnimating && !this.snapDisabled) {\n            this.isScrolling = true;\n            clearTimeout(this.scrollTimer);\n            this.scrollTimer = window.setTimeout(function () {\n                _this.isScrolling = false;\n                _this.locateCurrentIndex(true);\n            }, 500);\n        }\n        else {\n            this.locateCurrentIndex();\n        }\n    };\n    DragScrollComponent.prototype.onMouseUpHandler = function (event) {\n        if (this.isPressed) {\n            this.isPressed = false;\n            if (!this.snapDisabled) {\n                this.locateCurrentIndex(true);\n            }\n            else {\n                this.locateCurrentIndex();\n            }\n        }\n    };\n    DragScrollComponent.prototype.moveLeft = function () {\n        if ((this.currIndex !== 0 || this.snapDisabled)) {\n            this.currIndex--;\n            clearTimeout(this.scrollToTimer);\n            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n        }\n    };\n    DragScrollComponent.prototype.moveRight = function () {\n        var container = this.wrapper || this.parentNode;\n        var containerWidth = container ? container.clientWidth : 0;\n        if (!this.scrollReachesRightEnd && this.currIndex < this.maximumIndex(containerWidth, this._children)) {\n            this.currIndex++;\n            clearTimeout(this.scrollToTimer);\n            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n        }\n    };\n    DragScrollComponent.prototype.moveTo = function (index) {\n        var container = this.wrapper || this.parentNode;\n        var containerWidth = container ? container.clientWidth : 0;\n        if (index >= 0 &&\n            index !== this.currIndex &&\n            this.currIndex < this.maximumIndex(containerWidth, this._children)) {\n            this.currIndex = index;\n            clearTimeout(this.scrollToTimer);\n            this.scrollTo(this._contentRef.nativeElement, this.toChildrenLocation(), this.snapDuration);\n        }\n    };\n    DragScrollComponent.prototype.checkNavStatus = function () {\n        var _this = this;\n        setTimeout(function () {\n            var onlyOneItem = Boolean(_this._children['_results'].length <= 1);\n            var containerIsLargerThanContent = Boolean(_this._contentRef.nativeElement.scrollWidth <=\n                _this._contentRef.nativeElement.clientWidth);\n            if (onlyOneItem || containerIsLargerThanContent) {\n                _this.reachesLeftBound.emit(true);\n                _this.reachesRightBound.emit(true);\n            }\n            else if (_this.scrollReachesRightEnd) {\n                _this.reachesLeftBound.emit(false);\n                _this.reachesRightBound.emit(true);\n            }\n            else if (_this._contentRef.nativeElement.scrollLeft === 0 &&\n                _this._contentRef.nativeElement.scrollWidth > _this._contentRef.nativeElement.clientWidth) {\n                _this.reachesLeftBound.emit(true);\n                _this.reachesRightBound.emit(false);\n            }\n            else {\n                _this.reachesLeftBound.emit(false);\n                _this.reachesRightBound.emit(false);\n            }\n        }, 0);\n    };\n    DragScrollComponent.prototype.disableScroll = function (axis) {\n        this._renderer.setStyle(this._contentRef.nativeElement, \"overflow-\" + axis, 'hidden');\n    };\n    DragScrollComponent.prototype.enableScroll = function (axis) {\n        this._renderer.setStyle(this._contentRef.nativeElement, \"overflow-\" + axis, 'auto');\n    };\n    DragScrollComponent.prototype.hideScrollbar = function () {\n        if (this._contentRef.nativeElement.style.display !== 'none' && !this.wrapper) {\n            this.parentNode = this._contentRef.nativeElement.parentNode;\n            this.wrapper = this._renderer.createElement('div');\n            this._renderer.setAttribute(this.wrapper, 'class', 'drag-scroll-wrapper');\n            this._renderer.addClass(this.wrapper, 'drag-scroll-container');\n            this._renderer.setStyle(this.wrapper, 'width', '100%');\n            this._renderer.setStyle(this.wrapper, 'height', this._elementRef.nativeElement.style.height\n                || this._elementRef.nativeElement.offsetHeight + 'px');\n            this._renderer.setStyle(this.wrapper, 'overflow', 'hidden');\n            this._renderer.setStyle(this._contentRef.nativeElement, 'width', \"calc(100% + \" + this.scrollbarWidth + \")\");\n            this._renderer.setStyle(this._contentRef.nativeElement, 'height', \"calc(100% + \" + this.scrollbarWidth + \")\");\n            this._renderer.appendChild(this._elementRef.nativeElement, this.wrapper);\n            this._renderer.appendChild(this.wrapper, this._contentRef.nativeElement);\n        }\n    };\n    DragScrollComponent.prototype.showScrollbar = function () {\n        if (this.wrapper) {\n            this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');\n            this._renderer.setStyle(this._contentRef.nativeElement, 'height', this.wrapper.style.height);\n            if (this.parentNode !== null) {\n                this.parentNode.removeChild(this.wrapper);\n                this.parentNode.appendChild(this._contentRef.nativeElement);\n            }\n            this.wrapper = null;\n        }\n    };\n    DragScrollComponent.prototype.checkScrollbar = function () {\n        if (this._contentRef.nativeElement.scrollWidth <= this._contentRef.nativeElement.clientWidth) {\n            this._renderer.setStyle(this._contentRef.nativeElement, 'height', '100%');\n        }\n        else {\n            this._renderer.setStyle(this._contentRef.nativeElement, 'height', \"calc(100% + \" + this.scrollbarWidth + \")\");\n        }\n        if (this._contentRef.nativeElement.scrollHeight <= this._contentRef.nativeElement.clientHeight) {\n            this._renderer.setStyle(this._contentRef.nativeElement, 'width', '100%');\n        }\n        else {\n            this._renderer.setStyle(this._contentRef.nativeElement, 'width', \"calc(100% + \" + this.scrollbarWidth + \")\");\n        }\n    };\n    DragScrollComponent.prototype.setScrollBar = function () {\n        if (this.scrollbarHidden) {\n            this.hideScrollbar();\n        }\n        else {\n            this.showScrollbar();\n        }\n    };\n    DragScrollComponent.prototype.getScrollbarWidth = function () {\n        var outer = this._renderer.createElement('div');\n        this._renderer.setStyle(outer, 'visibility', 'hidden');\n        this._renderer.setStyle(outer, 'width', '100px');\n        this._renderer.setStyle(outer, 'msOverflowStyle', 'scrollbar');\n        this._renderer.appendChild(document.body, outer);\n        var widthNoScroll = outer.offsetWidth;\n        this._renderer.setStyle(outer, 'overflow', 'scroll');\n        var inner = this._renderer.createElement('div');\n        this._renderer.setStyle(inner, 'width', '100%');\n        this._renderer.appendChild(outer, inner);\n        var widthWithScroll = inner.offsetWidth;\n        this._renderer.removeChild(document.body, outer);\n        return widthNoScroll - widthWithScroll || 20;\n    };\n    DragScrollComponent.prototype.scrollTo = function (element, to, duration) {\n        var self = this;\n        self.isAnimating = true;\n        var start = element.scrollLeft, change = to - start - this.snapOffset, increment = 20;\n        var currentTime = 0;\n        var easeInOutQuad = function (t, b, c, d) {\n            t /= d / 2;\n            if (t < 1) {\n                return c / 2 * t * t + b;\n            }\n            t--;\n            return -c / 2 * (t * (t - 2) - 1) + b;\n        };\n        var animateScroll = function () {\n            currentTime += increment;\n            element.scrollLeft = easeInOutQuad(currentTime, start, change, duration);\n            if (currentTime < duration) {\n                self.scrollToTimer = window.setTimeout(animateScroll, increment);\n            }\n            else {\n                setTimeout(function () {\n                    self.isAnimating = false;\n                    self.snapAnimationFinished.emit(self.currIndex);\n                }, increment);\n            }\n        };\n        animateScroll();\n    };\n    DragScrollComponent.prototype.locateCurrentIndex = function (snap) {\n        var _this = this;\n        this.currentChildWidth(function (currentChildWidth, nextChildrenWidth, childrenWidth, idx, stop) {\n            if ((_this._contentRef.nativeElement.scrollLeft >= childrenWidth &&\n                _this._contentRef.nativeElement.scrollLeft <= nextChildrenWidth)) {\n                if (nextChildrenWidth - _this._contentRef.nativeElement.scrollLeft > currentChildWidth / 2 && !_this.scrollReachesRightEnd) {\n                    if (!_this.isAnimating) {\n                        _this.currIndex = idx;\n                    }\n                    if (snap) {\n                        _this.scrollTo(_this._contentRef.nativeElement, childrenWidth, _this.snapDuration);\n                    }\n                }\n                else {\n                    if (!_this.isAnimating) {\n                        _this.currIndex = idx + 1;\n                    }\n                    if (snap) {\n                        _this.scrollTo(_this._contentRef.nativeElement, childrenWidth + currentChildWidth, _this.snapDuration);\n                    }\n                }\n                stop();\n            }\n            else if ((idx + 1) === (_this._children['_results'].length - 1)) {\n                if (!_this.isAnimating) {\n                    _this.currIndex = idx + 1;\n                }\n                stop();\n            }\n        });\n    };\n    DragScrollComponent.prototype.currentChildWidth = function (cb) {\n        var childrenWidth = 0;\n        var shouldBreak = false;\n        var breakFunc = function () {\n            shouldBreak = true;\n        };\n        for (var i = 0; i < this._children['_results'].length; i++) {\n            if (i === this._children['_results'].length - 1) {\n                break;\n            }\n            if (shouldBreak) {\n                break;\n            }\n            var nextChildrenWidth = childrenWidth + this._children['_results'][i + 1]._elementRef.nativeElement.clientWidth;\n            var currentClildWidth = this._children['_results'][i]._elementRef.nativeElement.clientWidth;\n            cb(currentClildWidth, nextChildrenWidth, childrenWidth, i, breakFunc);\n            childrenWidth += currentClildWidth;\n        }\n    };\n    DragScrollComponent.prototype.toChildrenLocation = function () {\n        var to = 0;\n        for (var i = 0; i < this.currIndex; i++) {\n            to += this._children['_results'][i]._elementRef.nativeElement.clientWidth;\n        }\n        return to;\n    };\n    DragScrollComponent.prototype.markElDimension = function () {\n        if (this.wrapper) {\n            this.elWidth = this.wrapper.style.width;\n            this.elHeight = this.wrapper.style.height;\n        }\n        else {\n            this.elWidth = this._elementRef.nativeElement.style.width || (this._elementRef.nativeElement.offsetWidth + 'px');\n            this.elHeight = this._elementRef.nativeElement.style.height || (this._elementRef.nativeElement.offsetHeight + 'px');\n        }\n    };\n    DragScrollComponent.prototype.maximumIndex = function (containerWidth, childrenElements) {\n        var count = 0;\n        var childrenWidth = 0;\n        for (var i = 0; i <= childrenElements['_results'].length; i++) {\n            var dragScrollItemDirective = childrenElements['_results'][childrenElements['_results'].length - 1 - i];\n            childrenWidth += dragScrollItemDirective._elementRef.nativeElement.clientWidth;\n            if (childrenWidth < containerWidth) {\n                count++;\n            }\n            else {\n                break;\n            }\n        }\n        return childrenElements.length - count;\n    };\n    return DragScrollComponent;\n}());\nexport { DragScrollComponent };\nfunction DragScrollComponent_tsickle_Closure_declarations() {\n    DragScrollComponent.decorators;\n    DragScrollComponent.ctorParameters;\n    DragScrollComponent.propDecorators;\n    DragScrollComponent.prototype._index;\n    DragScrollComponent.prototype._scrollbarHidden;\n    DragScrollComponent.prototype._disabled;\n    DragScrollComponent.prototype._xDisabled;\n    DragScrollComponent.prototype._yDisabled;\n    DragScrollComponent.prototype._dragDisabled;\n    DragScrollComponent.prototype._snapDisabled;\n    DragScrollComponent.prototype._snapOffset;\n    DragScrollComponent.prototype._snapDuration;\n    DragScrollComponent.prototype.isPressed;\n    DragScrollComponent.prototype.isScrolling;\n    DragScrollComponent.prototype.scrollTimer;\n    DragScrollComponent.prototype.scrollToTimer;\n    DragScrollComponent.prototype.downX;\n    DragScrollComponent.prototype.downY;\n    DragScrollComponent.prototype.displayType;\n    DragScrollComponent.prototype.elWidth;\n    DragScrollComponent.prototype.elHeight;\n    DragScrollComponent.prototype.parentNode;\n    DragScrollComponent.prototype._contentRef;\n    DragScrollComponent.prototype._children;\n    DragScrollComponent.prototype.wrapper;\n    DragScrollComponent.prototype.scrollbarWidth;\n    DragScrollComponent.prototype.isAnimating;\n    DragScrollComponent.prototype.scrollReachesRightEnd;\n    DragScrollComponent.prototype.prevChildrenLength;\n    DragScrollComponent.prototype.indexChanged;\n    DragScrollComponent.prototype.reachesLeftBound;\n    DragScrollComponent.prototype.reachesRightBound;\n    DragScrollComponent.prototype.snapAnimationFinished;\n    DragScrollComponent.prototype._elementRef;\n    DragScrollComponent.prototype._renderer;\n}\n//# sourceMappingURL=ngx-drag-scroll.js.map \n",null]}