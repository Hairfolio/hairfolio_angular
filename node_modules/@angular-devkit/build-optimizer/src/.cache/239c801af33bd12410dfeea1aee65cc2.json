{"remainingRequest":"/home/agile/Hairfolio_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/agile/Hairfolio_website/node_modules/angular-epic-spinners/fesm5/angular-epic-spinners.js","dependencies":[{"path":"/home/agile/Hairfolio_website/node_modules/angular-epic-spinners/fesm5/angular-epic-spinners.js","mtime":499162500000},{"path":"/home/agile/Hairfolio_website/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/agile/Hairfolio_website/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Component, Input, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { __assign } from 'tslib';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar AtomSpinnerComponent = /*@__PURE__*/ (function () {\n    function AtomSpinnerComponent() {\n        this.size = 60;\n        this.animationDuration = 1000;\n        this.color = 'red';\n    }\n    Object.defineProperty(AtomSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AtomSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                color: this.color,\n                fontSize: this.size * 0.24 + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(AtomSpinnerComponent.prototype, \"lineStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                animationDuration: this.animationDuration + \"ms\",\n                borderLeftWidth: this.size / 25 + \"px\",\n                borderRightWidth: this.size / 25 + \"px\",\n                borderLeftColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    AtomSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return AtomSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar AtomSpinnerModule = /*@__PURE__*/ (function () {\n    function AtomSpinnerModule() {\n    }\n    return AtomSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar BreedingRhombusSpinnerComponent = /*@__PURE__*/ (function () {\n    function BreedingRhombusSpinnerComponent() {\n        this.size = 150;\n        this.animationDuration = 2000;\n        this.color = '#fff';\n        this.animationBaseName = 'breeding-rhombus-spinner-animation-child';\n        this.rhombusesNum = 8;\n    }\n    Object.defineProperty(BreedingRhombusSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreedingRhombusSpinnerComponent.prototype, \"rhombusStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size / 7.5 + \"px\",\n                width: this.size / 7.5 + \"px\",\n                animationDuration: \"\" + this.animationDuration,\n                top: this.size / 2.3077 + \"px\",\n                left: this.size / 23077 + \"px\",\n                backgroundColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreedingRhombusSpinnerComponent.prototype, \"rhombusesStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var rhombusesStyles = [];\n            /** @type {?} */\n            var delayModifier = this.animationDuration * 0.05;\n            for (var i = 1; i <= this.rhombusesNum; i++) {\n                rhombusesStyles.push(__assign({}, this.rhombusStyle, { animationDelay: delayModifier * (i + 1) + \"ms\" }));\n            }\n            return rhombusesStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(BreedingRhombusSpinnerComponent.prototype, \"bigRhombusStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size / 3 + \"px\",\n                width: this.size / 3 + \"px\",\n                animationDuration: \"\" + this.animationDuration,\n                top: this.size / 3 + \"px\",\n                left: this.size / 3 + \"px\",\n                backgroundColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} index\n     * @return {?}\n     */\n    BreedingRhombusSpinnerComponent.prototype.childClassString = /**\n     * @param {?} index\n     * @return {?}\n     */\n        function (index) {\n            return \"child-\" + (index + 1);\n        };\n    /**\n     * @return {?}\n     */\n    BreedingRhombusSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return BreedingRhombusSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar BreedingRhombusSpinnerModule = /*@__PURE__*/ (function () {\n    function BreedingRhombusSpinnerModule() {\n    }\n    return BreedingRhombusSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar CirclesToRhumbusesSpinnerComponent = /*@__PURE__*/ (function () {\n    function CirclesToRhumbusesSpinnerComponent() {\n        this.circleSize = 15;\n        this.circlesNum = 3;\n        this.animationDuration = 1200;\n        this.color = '#fff';\n    }\n    Object.defineProperty(CirclesToRhumbusesSpinnerComponent.prototype, \"circleMarginLeft\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.circleSize * 1.125;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CirclesToRhumbusesSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.circleSize + \"px\",\n                width: (this.circleSize + this.circleMarginLeft) * this.circlesNum + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CirclesToRhumbusesSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\",\n                height: this.circleSize + \"px\",\n                width: this.circleSize + \"px\",\n                marginLeft: this.circleMarginLeft + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CirclesToRhumbusesSpinnerComponent.prototype, \"circlesStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var circlesStyles = [];\n            /** @type {?} */\n            var delay = 150;\n            for (var i = 1; i <= this.circlesNum; i++) {\n                /** @type {?} */\n                var style = __assign({}, this.circleStyle, { animationDelay: i * delay + \"ms\" });\n                circlesStyles.push(style);\n            }\n            return circlesStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    CirclesToRhumbusesSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return CirclesToRhumbusesSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar CirclesToRhumbusesSpinnerModule = /*@__PURE__*/ (function () {\n    function CirclesToRhumbusesSpinnerModule() {\n    }\n    return CirclesToRhumbusesSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FingerprintSpinnerComponent = /*@__PURE__*/ (function () {\n    function FingerprintSpinnerComponent() {\n        this.size = 60;\n        this.animationDuration = 1500;\n        this.color = '#fff';\n        this.ringsNum = 9;\n        this.containerPadding = 2;\n    }\n    Object.defineProperty(FingerprintSpinnerComponent.prototype, \"outerRingSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size - this.containerPadding * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FingerprintSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                padding: this.containerPadding + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FingerprintSpinnerComponent.prototype, \"ringStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderTopColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FingerprintSpinnerComponent.prototype, \"ringsStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var ringsStyles = [];\n            /** @type {?} */\n            var ringBase = this.outerRingSize / (this.ringsNum);\n            /** @type {?} */\n            var ringInc = ringBase;\n            for (var i = 1; i <= this.ringsNum; i++) {\n                ringsStyles.push(__assign({}, this.ringStyle, { animationDelay: i * 50 + \"ms\", height: ringBase + (i + 1) * ringInc + \"px\", width: ringBase + (i + 1) * ringInc + \"px\" }));\n            }\n            return ringsStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FingerprintSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return FingerprintSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FingerprintSpinnerModule = /*@__PURE__*/ (function () {\n    function FingerprintSpinnerModule() {\n    }\n    return FingerprintSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FulfillingBouncingCircleSpinnerComponent = /*@__PURE__*/ (function () {\n    function FulfillingBouncingCircleSpinnerComponent() {\n        this.size = 60;\n        this.animationDuration = 4000;\n        this.color = '#fff';\n    }\n    Object.defineProperty(FulfillingBouncingCircleSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FulfillingBouncingCircleSpinnerComponent.prototype, \"orbitStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                borderColor: this.color,\n                borderWidth: this.size * 0.03 + \"px\",\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FulfillingBouncingCircleSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                borderColor: this.color,\n                color: this.color,\n                borderWidth: this.size * 0.1 + \"px\",\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FulfillingBouncingCircleSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return FulfillingBouncingCircleSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FulfillingBouncingCircleSpinnerModule = /*@__PURE__*/ (function () {\n    function FulfillingBouncingCircleSpinnerModule() {\n    }\n    return FulfillingBouncingCircleSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FlowerSpinnerComponent = /*@__PURE__*/ (function () {\n    function FlowerSpinnerComponent() {\n        this.size = 70;\n        this.animationDuration = 2500;\n        this.color = '#fff';\n        this.smallerDotAnimationBaseName = 'flower-spinner-smaller-dot-animation';\n        this.biggerDotAnimationBaseName = 'flower-spinner-bigger-dot-animation';\n        this.currentSmallerDotAnimationBaseName = '';\n        this.currentBiggerDotAnimationBaseName = '';\n    }\n    Object.defineProperty(FlowerSpinnerComponent.prototype, \"dotSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size / 7;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FlowerSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FlowerSpinnerComponent.prototype, \"dotsContainerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                width: this.color + \"px\",\n                height: this.color + \"px\",\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FlowerSpinnerComponent.prototype, \"smallerDotStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                background: this.color,\n                animationDuration: this.animationDuration + \"ms\",\n                animationName: this.currentSmallerDotAnimationBaseName\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FlowerSpinnerComponent.prototype, \"biggerDotStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                background: this.color,\n                animationDuration: this.animationDuration + \"ms\",\n                animationName: this.currentBiggerDotAnimationBaseName\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FlowerSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    /**\n     * @return {?}\n     */\n    FlowerSpinnerComponent.prototype.ngOnChanges = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return FlowerSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FlowerSpinnerModule = /*@__PURE__*/ (function () {\n    function FlowerSpinnerModule() {\n    }\n    return FlowerSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FulfillingSquareSpinnerComponent = /*@__PURE__*/ (function () {\n    function FulfillingSquareSpinnerComponent() {\n        this.animationDuration = 4000;\n        this.size = 50;\n        this.color = '#fff';\n    }\n    Object.defineProperty(FulfillingSquareSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                borderColor: this.color,\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FulfillingSquareSpinnerComponent.prototype, \"spinnerInnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                backgroundColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    FulfillingSquareSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return FulfillingSquareSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar FulfillingSquareSpinnerModule = /*@__PURE__*/ (function () {\n    function FulfillingSquareSpinnerModule() {\n    }\n    return FulfillingSquareSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar HalfCircleSpinnerComponent = /*@__PURE__*/ (function () {\n    function HalfCircleSpinnerComponent() {\n        this.animationDuration = 1000;\n        this.size = 60;\n        this.color = '#fff';\n    }\n    Object.defineProperty(HalfCircleSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HalfCircleSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderWidth: this.size / 10 + \"px\",\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HalfCircleSpinnerComponent.prototype, \"circle1Style\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return __assign({}, this.circleStyle, { borderTopColor: this.color });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HalfCircleSpinnerComponent.prototype, \"circle2Style\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return __assign({}, this.circleStyle, { borderBottomColor: this.color });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    HalfCircleSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return HalfCircleSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar HalfCircleSpinnerModule = /*@__PURE__*/ (function () {\n    function HalfCircleSpinnerModule() {\n    }\n    return HalfCircleSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar HollowDotsSpinnerComponent = /*@__PURE__*/ (function () {\n    function HollowDotsSpinnerComponent() {\n        this.animationDuration = 1000;\n        this.dotSize = 15;\n        this.dotsNum = 3;\n        this.color = '#fff';\n    }\n    Object.defineProperty(HollowDotsSpinnerComponent.prototype, \"horizontalMargin\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.dotSize / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HollowDotsSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.dotSize + \"px\",\n                width: this.dotSize + \"px\",\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HollowDotsSpinnerComponent.prototype, \"dotStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                width: this.dotSize + \"px\",\n                height: this.dotSize + \"px\",\n                margin: \"0 \" + this.horizontalMargin + \"px\",\n                borderWidth: this.dotSize / 5 + \"px\",\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(HollowDotsSpinnerComponent.prototype, \"dotsStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var dotsStyles = [];\n            /** @type {?} */\n            var delayModifier = 0.3;\n            /** @type {?} */\n            var basicDelay = 1000;\n            for (var i = 1; i <= this.dotsNum; i++) {\n                /** @type {?} */\n                var style = __assign({}, this.dotStyle, { animationDelay: basicDelay * i * delayModifier + \"ms\" });\n                dotsStyles.push(style);\n            }\n            return dotsStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    HollowDotsSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return HollowDotsSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar HollowDotsSpinnerModule = /*@__PURE__*/ (function () {\n    function HollowDotsSpinnerModule() {\n    }\n    return HollowDotsSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar IntersectingCirclesSpinnerComponent = /*@__PURE__*/ (function () {\n    function IntersectingCirclesSpinnerComponent() {\n        this.animationDuration = 1200;\n        this.size = 70;\n        this.color = '#fff';\n    }\n    Object.defineProperty(IntersectingCirclesSpinnerComponent.prototype, \"circleSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size / 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IntersectingCirclesSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                width: this.size + \"px\",\n                height: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IntersectingCirclesSpinnerComponent.prototype, \"spinnerBlockStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                animationDuration: this.animationDuration + \"ms\",\n                width: this.circleSize + \"px\",\n                height: this.circleSize + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IntersectingCirclesSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(IntersectingCirclesSpinnerComponent.prototype, \"circleStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            var _this = this;\n            /** @type {?} */\n            var circlesPositions = [\n                { top: 0, left: 0 },\n                { left: this.circleSize * -0.36 + \"px\", top: this.circleSize * 0.2 + \"px\" },\n                { left: this.circleSize * -0.36 + \"px\", top: this.circleSize * -0.2 + \"px\" },\n                { left: 0, top: this.circleSize * -0.36 + \"px\" },\n                { left: this.circleSize * 0.36 + \"px\", top: this.circleSize * -0.2 + \"px\" },\n                { left: this.circleSize * 0.36 + \"px\", top: this.circleSize * 0.2 + \"px\" },\n                { left: 0, top: this.circleSize * 0.36 + \"px\" }\n            ];\n            return circlesPositions.map(function (cp) {\n                return __assign({ cp: cp }, _this.circleStyle);\n            });\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    IntersectingCirclesSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return IntersectingCirclesSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar IntersectingCirclesSpinnerModule = /*@__PURE__*/ (function () {\n    function IntersectingCirclesSpinnerModule() {\n    }\n    return IntersectingCirclesSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar LoopingRhumbusesSpinnerComponent = /*@__PURE__*/ (function () {\n    function LoopingRhumbusesSpinnerComponent() {\n        this.animationDuration = 2500;\n        this.rhombusSize = 15;\n        this.color = '#fff';\n        this.rhombusesNum = 3;\n    }\n    Object.defineProperty(LoopingRhumbusesSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.rhombusSize + \"px\",\n                width: this.rhombusSize * 4 + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoopingRhumbusesSpinnerComponent.prototype, \"rhombusStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.rhombusSize + \"px\",\n                width: this.rhombusSize + \"px\",\n                background: this.color,\n                animationDuration: this.animationDuration + \"ms\",\n                left: this.rhombusSize * 4 + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LoopingRhumbusesSpinnerComponent.prototype, \"rhombusesStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var rhombusesStyles = [];\n            /** @type {?} */\n            var delay = -this.animationDuration / 1.5;\n            for (var i = 1; i <= this.rhombusesNum; i++) {\n                /** @type {?} */\n                var style = Object.assign({\n                    animationDelay: i * delay + \"ms\"\n                }, this.rhombusStyle);\n                rhombusesStyles.push(style);\n            }\n            return rhombusesStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    LoopingRhumbusesSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return LoopingRhumbusesSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar LoopingRhumbusesSpinnerModule = /*@__PURE__*/ (function () {\n    function LoopingRhumbusesSpinnerModule() {\n    }\n    return LoopingRhumbusesSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar OrbitSpinnerComponent = /*@__PURE__*/ (function () {\n    function OrbitSpinnerComponent() {\n        this.animationDuration = 1000;\n        this.size = 50;\n        this.color = '#fff';\n    }\n    Object.defineProperty(OrbitSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(OrbitSpinnerComponent.prototype, \"orbitStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    OrbitSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return OrbitSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar OrbitSpinnerModule = /*@__PURE__*/ (function () {\n    function OrbitSpinnerModule() {\n    }\n    return OrbitSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar PixelSpinnerComponent = /*@__PURE__*/ (function () {\n    function PixelSpinnerComponent() {\n        this.animationDuration = 1000;\n        this.size = 50;\n        this.color = '#fff';\n        this.animationBaseName = 'pixel-spinner-animation';\n        this.currentAnimationName = '';\n    }\n    Object.defineProperty(PixelSpinnerComponent.prototype, \"pixelSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size / 7;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PixelSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                width: this.size + \"px\",\n                height: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(PixelSpinnerComponent.prototype, \"spinnerInnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                animationDuration: this.animationDuration + \"ms\",\n                animationName: this.currentAnimationName,\n                width: this.pixelSize + \"px\",\n                height: this.pixelSize + \"px\",\n                backgroundColor: this.color,\n                color: this.color,\n                boxShadow: \"\\n                        \" + this.pixelSize * 1.5 + \"px \" + this.pixelSize * 1.5 + \"px 0 0,\\n                        \" + this.pixelSize * -1.5 + \"px \" + this.pixelSize * -1.5 + \"px 0 0,\\n                        \" + this.pixelSize * 1.5 + \"px \" + this.pixelSize * -1.5 + \"px 0 0,\\n                        \" + this.pixelSize * -1.5 + \"px \" + this.pixelSize * 1.5 + \"px 0 0,\\n                        0 \" + this.pixelSize * 1.5 + \"px 0 0,\\n                        \" + this.pixelSize * 1.5 + \"px 0 0 0,\\n                        \" + this.pixelSize * -1.5 + \"px 0 0 0,\\n                        0 \" + this.pixelSize * -1.5 + \"px 0 0\\n                      \"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    PixelSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return PixelSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar PixelSpinnerModule = /*@__PURE__*/ (function () {\n    function PixelSpinnerModule() {\n    }\n    return PixelSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar RadarSpinnerComponent = /*@__PURE__*/ (function () {\n    function RadarSpinnerComponent() {\n        this.size = 110;\n        this.animationDuration = 2000;\n        this.color = '#fff';\n        this.circlesNum = 4;\n    }\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"borderWidth\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size * 5 / 110;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"circleStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"circleInnerContainerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderWidth: this.borderWidth + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"circleInnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                borderLeftColor: this.color,\n                borderRightColor: this.color,\n                borderWidth: this.borderWidth + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(RadarSpinnerComponent.prototype, \"circlesStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var circlesStyles = [];\n            /** @type {?} */\n            var delay = this.animationDuration * 0.15;\n            for (var i = 0; i < this.circlesNum; i++) {\n                circlesStyles.push(Object.assign({\n                    padding: this.borderWidth * 2 * i + \"px\",\n                    animationDelay: (i === this.circlesNum - 1 ? 0 : delay) + \"ms\"\n                }, this.circleStyle));\n            }\n            return circlesStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    RadarSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return RadarSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar RadarSpinnerModule = /*@__PURE__*/ (function () {\n    function RadarSpinnerModule() {\n    }\n    return RadarSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar ScalingSquaresSpinnerComponent = /*@__PURE__*/ (function () {\n    function ScalingSquaresSpinnerComponent() {\n        this.size = 65;\n        this.color = '#fff';\n        this.animationDuration = 1250;\n        this.squaresNum = 4;\n    }\n    Object.defineProperty(ScalingSquaresSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ScalingSquaresSpinnerComponent.prototype, \"squareStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size * 0.25 / 1.3 + \"px\",\n                width: this.size * 0.25 / 1.3 + \"px\",\n                animationDuration: this.animationDuration + \"ms\",\n                borderWidth: this.size * 0.04 / 1.3 + \"px\",\n                borderColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ScalingSquaresSpinnerComponent.prototype, \"squaresStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var squaresStyles = [];\n            for (var i = 1; i <= this.squaresNum; i++) {\n                squaresStyles.push(__assign({}, this.squareStyle));\n            }\n            return squaresStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @param {?} i\n     * @return {?}\n     */\n    ScalingSquaresSpinnerComponent.prototype.childClass = /**\n     * @param {?} i\n     * @return {?}\n     */\n        function (i) {\n            return \"square-\" + (i + 1);\n        };\n    /**\n     * @return {?}\n     */\n    ScalingSquaresSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return ScalingSquaresSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar ScalingSquaresSpinnerModule = /*@__PURE__*/ (function () {\n    function ScalingSquaresSpinnerModule() {\n    }\n    return ScalingSquaresSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SelfBuildingSquareSpinnerComponent = /*@__PURE__*/ (function () {\n    function SelfBuildingSquareSpinnerComponent() {\n        this.animationDuration = 6000;\n        this.size = 40;\n        this.color = '#fff';\n        this.squaresNum = 9;\n    }\n    Object.defineProperty(SelfBuildingSquareSpinnerComponent.prototype, \"squareSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size / 4;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelfBuildingSquareSpinnerComponent.prototype, \"initialTopPosition\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return -this.squareSize * 2 / 3;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelfBuildingSquareSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                top: -this.initialTopPosition + \"px\",\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelfBuildingSquareSpinnerComponent.prototype, \"squareStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.squareSize + \"px\",\n                width: this.squareSize + \"px\",\n                top: this.initialTopPosition + \"px\",\n                marginRight: this.squareSize / 3 + \"px\",\n                marginTop: this.squareSize / 3 + \"px\",\n                animationDuration: this.animationDuration + \"ms\",\n                background: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SelfBuildingSquareSpinnerComponent.prototype, \"squaresStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var squaresStyles = [];\n            /** @type {?} */\n            var delaysMultipliers = [6, 7, 8, 3, 4, 5, 0, 1, 2];\n            /** @type {?} */\n            var delayModifier = this.animationDuration * 0.05;\n            for (var i = 0; i < this.squaresNum; i++) {\n                squaresStyles.push(__assign({ animationDelay: delayModifier * delaysMultipliers[i] + \"ms\" }, this.squareStyle));\n            }\n            return squaresStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SelfBuildingSquareSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return SelfBuildingSquareSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SelfBuildingSquareSpinnerModule = /*@__PURE__*/ (function () {\n    function SelfBuildingSquareSpinnerModule() {\n    }\n    return SelfBuildingSquareSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SemipolarSpinnerComponent = /*@__PURE__*/ (function () {\n    function SemipolarSpinnerComponent() {\n        this.animationDuration = 2000;\n        this.size = 65;\n        this.color = '#fff';\n        this.ringsNum = 5;\n    }\n    Object.defineProperty(SemipolarSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SemipolarSpinnerComponent.prototype, \"ringStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                animationDuration: this.animationDuration + \"ms\",\n                borderTopColor: this.color,\n                borderLeftColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SemipolarSpinnerComponent.prototype, \"ringsStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var ringsStyles = [];\n            /** @type {?} */\n            var delayModifier = 0.1;\n            /** @type {?} */\n            var ringWidth = this.size * 0.05;\n            /** @type {?} */\n            var positionIncrement = ringWidth * 2;\n            /** @type {?} */\n            var sizeDecrement = this.size * 0.2;\n            for (var i = 0; i < this.ringsNum; i++) {\n                /** @type {?} */\n                var computedSize = this.size - sizeDecrement * i + \"px\";\n                /** @type {?} */\n                var computedPosition = positionIncrement * i + \"px\";\n                /** @type {?} */\n                var style = __assign({ animationDelay: this.animationDuration * delayModifier * (this.ringsNum - i - 1) + \"ms\", height: computedSize, width: computedSize, left: computedPosition, top: computedPosition, borderWidth: ringWidth + \"px\" }, this.ringStyle);\n                ringsStyles.push(style);\n            }\n            return ringsStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SemipolarSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return SemipolarSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SemipolarSpinnerModule = /*@__PURE__*/ (function () {\n    function SemipolarSpinnerModule() {\n    }\n    return SemipolarSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SpringSpinnerComponent = /*@__PURE__*/ (function () {\n    function SpringSpinnerComponent() {\n        this.size = 60;\n        this.color = '#fff';\n        this.animationDuration = 2000;\n        this.animationBaseName = 'spring-spinner-animation';\n        this.currentAnimationName = '';\n    }\n    Object.defineProperty(SpringSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpringSpinnerComponent.prototype, \"spinnerPartStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size / 2 + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SpringSpinnerComponent.prototype, \"rotatorStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                borderRightColor: this.color,\n                borderTopColor: this.color,\n                borderWidth: this.size / 7 + \"px\",\n                animationDuration: this.animationDuration + \"ms\",\n                animationName: this.currentAnimationName\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SpringSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return SpringSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SpringSpinnerModule = /*@__PURE__*/ (function () {\n    function SpringSpinnerModule() {\n    }\n    return SpringSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SwappingSquaresSpinnerComponent = /*@__PURE__*/ (function () {\n    function SwappingSquaresSpinnerComponent() {\n        this.animationDuration = 1000;\n        this.size = 65;\n        this.color = '#fff';\n        this.animationBaseName = 'swapping-square-animation-child';\n        this.squaresNum = 4;\n    }\n    Object.defineProperty(SwappingSquaresSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwappingSquaresSpinnerComponent.prototype, \"squareStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size * 0.25 / 1.3 + \"px\",\n                width: this.size * 0.25 / 1.3 + \"px\",\n                animationDuration: this.animationDuration + \"ms\",\n                borderWidth: this.size * 0.04 / 1.3 + \"px\",\n                borderColor: this.color\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(SwappingSquaresSpinnerComponent.prototype, \"squaresStyles\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            /** @type {?} */\n            var squaresStyles = [];\n            /** @type {?} */\n            var delay = this.animationDuration * 0.5;\n            for (var i = 1; i <= this.squaresNum; i++) {\n                squaresStyles.push(__assign({ animationDelay: (i % 2 === 0 ? delay : 0) + \"ms\" }, this.squareStyle));\n            }\n            return squaresStyles;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    SwappingSquaresSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return SwappingSquaresSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar SwappingSquaresSpinnerModule = /*@__PURE__*/ (function () {\n    function SwappingSquaresSpinnerModule() {\n    }\n    return SwappingSquaresSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar TrinityRingsSpinnerComponent = /*@__PURE__*/ (function () {\n    function TrinityRingsSpinnerComponent() {\n        this.containerPadding = 3;\n        this.animationDuration = 1500;\n        this.size = 60;\n        this.color = '#fff';\n    }\n    Object.defineProperty(TrinityRingsSpinnerComponent.prototype, \"outerRingSize\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return this.size - this.containerPadding * 2;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TrinityRingsSpinnerComponent.prototype, \"spinnerStyle\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.size + \"px\",\n                width: this.size + \"px\",\n                padding: this.containerPadding + \"px\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TrinityRingsSpinnerComponent.prototype, \"ring1Style\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.outerRingSize + \"px\",\n                width: this.outerRingSize + \"px\",\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TrinityRingsSpinnerComponent.prototype, \"ring2Style\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.outerRingSize * 0.65 + \"px\",\n                width: this.outerRingSize * 0.65 + \"px\",\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(TrinityRingsSpinnerComponent.prototype, \"ring3Style\", {\n        get: /**\n         * @return {?}\n         */ function () {\n            return {\n                height: this.outerRingSize * 0.1 + \"px\",\n                width: this.outerRingSize * 0.1 + \"px\",\n                borderColor: this.color,\n                animationDuration: this.animationDuration + \"ms\"\n            };\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TrinityRingsSpinnerComponent.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n        };\n    return TrinityRingsSpinnerComponent;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nvar TrinityRingsSpinnerModule = /*@__PURE__*/ (function () {\n    function TrinityRingsSpinnerModule() {\n    }\n    return TrinityRingsSpinnerModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc\n */\nexport { AtomSpinnerModule, BreedingRhombusSpinnerModule, CirclesToRhumbusesSpinnerModule, FingerprintSpinnerModule, FulfillingBouncingCircleSpinnerModule, FlowerSpinnerModule, FulfillingSquareSpinnerModule, HalfCircleSpinnerModule, HollowDotsSpinnerModule, IntersectingCirclesSpinnerModule, LoopingRhumbusesSpinnerModule, OrbitSpinnerModule, PixelSpinnerModule, RadarSpinnerModule, ScalingSquaresSpinnerModule, SelfBuildingSquareSpinnerModule, SemipolarSpinnerModule, SpringSpinnerModule, SwappingSquaresSpinnerModule, TrinityRingsSpinnerModule, AtomSpinnerComponent as ɵa, BreedingRhombusSpinnerComponent as ɵb, CirclesToRhumbusesSpinnerComponent as ɵc, FingerprintSpinnerComponent as ɵd, FlowerSpinnerComponent as ɵf, FulfillingBouncingCircleSpinnerComponent as ɵe, FulfillingSquareSpinnerComponent as ɵg, HalfCircleSpinnerComponent as ɵh, HollowDotsSpinnerComponent as ɵi, IntersectingCirclesSpinnerComponent as ɵj, LoopingRhumbusesSpinnerComponent as ɵk, OrbitSpinnerComponent as ɵl, PixelSpinnerComponent as ɵm, RadarSpinnerComponent as ɵn, ScalingSquaresSpinnerComponent as ɵo, SelfBuildingSquareSpinnerComponent as ɵp, SemipolarSpinnerComponent as ɵq, SpringSpinnerComponent as ɵr, SwappingSquaresSpinnerComponent as ɵs, TrinityRingsSpinnerComponent as ɵt };\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1lcGljLXNwaW5uZXJzLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9hdG9tLXNwaW5uZXIvYXRvbS1zcGlubmVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvYXRvbS1zcGlubmVyL2F0b20tc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2JyZWVkaW5nLXJob21idXMtc3Bpbm5lci9icmVlZGluZy1yaG9tYnVzLXNwaW5uZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9icmVlZGluZy1yaG9tYnVzLXNwaW5uZXIvYnJlZWRpbmctcmhvbWJ1cy1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvY2lyY2xlcy10by1yaHVtYnVzZXMtc3Bpbm5lci9jaXJjbGVzLXRvLXJodW1idXNlcy1zcGlubmVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvY2lyY2xlcy10by1yaHVtYnVzZXMtc3Bpbm5lci9jaXJjbGVzLXRvLXJodW1idXNlcy1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvZmluZ2VycHJpbnQtc3Bpbm5lci9maW5nZXJwcmludC1zcGlubmVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvZmluZ2VycHJpbnQtc3Bpbm5lci9maW5nZXJwcmludC1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvZnVsZmlsbGluZy1ib3VuY2luZy1jaXJjbGUtc3Bpbm5lci9mdWxmaWxsaW5nLWJvdW5jaW5nLWNpcmNsZS1zcGlubmVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvZnVsZmlsbGluZy1ib3VuY2luZy1jaXJjbGUtc3Bpbm5lci9mdWxmaWxsaW5nLWJvdW5jaW5nLWNpcmNsZS1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvZmxvd2VyLXNwaW5uZXIvZmxvd2VyLXNwaW5uZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9mbG93ZXItc3Bpbm5lci9mbG93ZXItc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2Z1bGZpbGxpbmctc3F1YXJlLXNwaW5uZXIvZnVsZmlsbGluZy1zcXVhcmUtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2Z1bGZpbGxpbmctc3F1YXJlLXNwaW5uZXIvZnVsZmlsbGluZy1zcXVhcmUtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2hhbGYtY2lyY2xlLXNwaW5uZXIvaGFsZi1jaXJjbGUtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2hhbGYtY2lyY2xlLXNwaW5uZXIvaGFsZi1jaXJjbGUtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2hvbGxvdy1kb3RzLXNwaW5uZXIvaG9sbG93LWRvdHMtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2hvbGxvdy1kb3RzLXNwaW5uZXIvaG9sbG93LWRvdHMtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2ludGVyc2VjdGluZy1jaXJjbGVzLXNwaW5uZXIvaW50ZXJzZWN0aW5nLWNpcmNsZXMtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2ludGVyc2VjdGluZy1jaXJjbGVzLXNwaW5uZXIvaW50ZXJzZWN0aW5nLWNpcmNsZXMtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2xvb3BpbmctcmhvbWJ1c2VzLXNwaW5uZXIvbG9vcGluZy1yaHVtYnVzZXMtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL2xvb3BpbmctcmhvbWJ1c2VzLXNwaW5uZXIvbG9vcGluZy1yaHVtYnVzZXMtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL29yYml0LXNwaW5uZXIvb3JiaXQtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL29yYml0LXNwaW5uZXIvb3JiaXQtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3BpeGVsLXNwaW5uZXIvcGl4ZWwtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3BpeGVsLXNwaW5uZXIvcGl4ZWwtc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3JhZGFyLXNwaW5uZXIvcmFkYXItc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3JhZGFyLXNwaW5uZXIvcmFkYXItc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3NjYWxpbmctc3F1YXJlcy1zcGlubmVyL3NjYWxpbmctc3F1YXJlcy1zcGlubmVyLmNvbXBvbmVudC50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvc2NhbGluZy1zcXVhcmVzLXNwaW5uZXIvc2NhbGluZy1zcXVhcmVzLXNwaW5uZXIubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9zZWxmLWJ1aWxkaW5nLXNxdWFyZS1zcGlubmVyL3NlbGYtYnVpbGRpbmctc3F1YXJlLXNwaW5uZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9zZWxmLWJ1aWxkaW5nLXNxdWFyZS1zcGlubmVyL3NlbGYtYnVpbGRpbmctc3F1YXJlLXNwaW5uZXIubW9kdWxlLnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9zZW1pcG9sYXItc3Bpbm5lci9zZW1pcG9sYXItc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3NlbWlwb2xhci1zcGlubmVyL3NlbWlwb2xhci1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvc3ByaW5nLXNwaW5uZXIvc3ByaW5nLXNwaW5uZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9zcHJpbmctc3Bpbm5lci9zcHJpbmctc3Bpbm5lci5tb2R1bGUudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3N3YXBwaW5nLXNxdWFyZXMtc3Bpbm5lci9zd2FwcGluZy1zcXVhcmVzLXNwaW5uZXIuY29tcG9uZW50LnRzIiwibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvc3JjL2FwcC9zd2FwcGluZy1zcXVhcmVzLXNwaW5uZXIvc3dhcHBpbmctc3F1YXJlcy1zcGlubmVyLm1vZHVsZS50cyIsIm5nOi8vYW5ndWxhci1lcGljLXNwaW5uZXJzL3NyYy9hcHAvdHJpbml0eS1yaW5ncy1zcGlubmVyL3RyaW5pdHktcmluZ3Mtc3Bpbm5lci5jb21wb25lbnQudHMiLCJuZzovL2FuZ3VsYXItZXBpYy1zcGlubmVycy9zcmMvYXBwL3RyaW5pdHktcmluZ3Mtc3Bpbm5lci90cmluaXR5LXJpbmdzLXNwaW5uZXIubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBPbkluaXQsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWF0b20tc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgICA8ZGl2IGNsYXNzPVwiYXRvbS1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWlubmVyXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItbGluZVwiIFtuZ1N0eWxlXT1cImxpbmVTdHlsZVwiPjwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWxpbmVcIiBbbmdTdHlsZV09XCJsaW5lU3R5bGVcIj48L2Rpdj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1saW5lXCIgW25nU3R5bGVdPVwibGluZVN0eWxlXCI+PC9kaXY+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXItY2lyY2xlXCIgW25nU3R5bGVdPVwiY2lyY2xlU3R5bGVcIj5cbiAgICAgICAgICAgICYjOTY3OTtcbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vYXRvbS1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBBdG9tU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBASW5wdXQoKSBzaXplID0gNjA7XG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMTAwMDtcbiAgQElucHV0KCkgY29sb3IgPSAncmVkJztcblxuICBnZXQgc3Bpbm5lclN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgZm9udFNpemU6IGAke3RoaXMuc2l6ZSAqIDAuMjR9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBsaW5lU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgICAgIGJvcmRlckxlZnRXaWR0aDogYCR7dGhpcy5zaXplIC8gMjV9cHhgLFxuICAgICAgYm9yZGVyUmlnaHRXaWR0aDogYCR7dGhpcy5zaXplIC8gMjV9cHhgLFxuICAgICAgYm9yZGVyTGVmdENvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0F0b21TcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2F0b20tc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbQXRvbVNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtBdG9tU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIEF0b21TcGlubmVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtYnJlZWRpbmctcmhvbWJ1cy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICAgIDxkaXYgY2xhc3M9XCJicmVlZGluZy1yaG9tYnVzLXNwaW5uZXJcIiBbbmdTdHlsZV09XCJzcGlubmVyU3R5bGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInJob21idXNcIiAqbmdGb3I9XCJsZXQgcnMgb2YgcmhvbWJ1c2VzU3R5bGVzOyBsZXQgaSA9IGluZGV4O1wiIFtuZ1N0eWxlXT1cInJzXCIgW25nQ2xhc3NdPVwiY2hpbGRDbGFzc1N0cmluZyhpKVwiPjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzPVwicmhvbWJ1cyBiaWdcIiBbbmdTdHlsZV09XCJiaWdSaG9tYnVzU3R5bGVcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIGAsXG4gIHN0eWxlVXJsczogWycuL2JyZWVkaW5nLXJob21idXMtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQnJlZWRpbmdSaG9tYnVzU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cbiAgQElucHV0KCkgc2l6ZSA9IDE1MDtcbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAyMDAwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBhbmltYXRpb25CYXNlTmFtZSA9ICdicmVlZGluZy1yaG9tYnVzLXNwaW5uZXItYW5pbWF0aW9uLWNoaWxkJztcbiAgcmhvbWJ1c2VzTnVtID0gODtcblxuICBnZXQgc3Bpbm5lclN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgcmhvbWJ1c1N0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZSAvIDcuNX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplIC8gNy41fXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufWAsXG4gICAgICB0b3A6IGAke3RoaXMuc2l6ZSAvIDIuMzA3N31weGAsXG4gICAgICBsZWZ0OiBgJHt0aGlzLnNpemUgLyAyMzA3N31weGAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29sb3JcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHJob21idXNlc1N0eWxlcygpIHtcbiAgICBjb25zdCByaG9tYnVzZXNTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBkZWxheU1vZGlmaWVyID0gdGhpcy5hbmltYXRpb25EdXJhdGlvbiAqIDAuMDU7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLnJob21idXNlc051bTsgaSsrKSB7XG4gICAgICByaG9tYnVzZXNTdHlsZXMucHVzaCh7XG4gICAgICAgIC4uLnRoaXMucmhvbWJ1c1N0eWxlLFxuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7ZGVsYXlNb2RpZmllciAqIChpICsgMSl9bXNgXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmhvbWJ1c2VzU3R5bGVzO1xuICB9XG5cbiAgZ2V0IGJpZ1Job21idXNTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemUgLyAzfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemUgLyAzfXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufWAsXG4gICAgICB0b3A6IGAke3RoaXMuc2l6ZSAvIDN9cHhgLFxuICAgICAgbGVmdDogYCR7dGhpcy5zaXplIC8gM31weGAsXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IHRoaXMuY29sb3JcbiAgICB9O1xuICB9XG5cbiAgY2hpbGRDbGFzc1N0cmluZyhpbmRleCkge1xuICAgIHJldHVybiBgY2hpbGQtJHtpbmRleCArIDF9YDtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0JyZWVkaW5nUmhvbWJ1c1NwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vYnJlZWRpbmctcmhvbWJ1cy1zcGlubmVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtCcmVlZGluZ1Job21idXNTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbQnJlZWRpbmdSaG9tYnVzU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIEJyZWVkaW5nUmhvbWJ1c1NwaW5uZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1jaXJjbGVzLXRvLXJodW1idXNlcy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiY2lyY2xlcy10by1yaG9tYnVzZXMtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZVwiICpuZ0Zvcj1cImxldCBjcyBvZiBjaXJjbGVzU3R5bGVzOyBsZXQgaSA9IGluZGV4O1wiIFtuZ1N0eWxlXT1cImNzXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL2NpcmNsZXMtdG8tcmh1bWJ1c2VzLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIENpcmNsZXNUb1JodW1idXNlc1NwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgY2lyY2xlU2l6ZSA9IDE1O1xuICBASW5wdXQoKSBjaXJjbGVzTnVtID0gMztcbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAxMjAwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBnZXQgY2lyY2xlTWFyZ2luTGVmdCgpIHtcbiAgICByZXR1cm4gdGhpcy5jaXJjbGVTaXplICogMS4xMjU7XG4gIH1cblxuICBnZXQgc3Bpbm5lclN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuY2lyY2xlU2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7KHRoaXMuY2lyY2xlU2l6ZSArIHRoaXMuY2lyY2xlTWFyZ2luTGVmdCkgKiB0aGlzLmNpcmNsZXNOdW19cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGVTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuY29sb3IsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2AsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMuY2lyY2xlU2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5jaXJjbGVTaXplfXB4YCxcbiAgICAgIG1hcmdpbkxlZnQ6IGAke3RoaXMuY2lyY2xlTWFyZ2luTGVmdH1weGBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGNpcmNsZXNTdHlsZXMoKSB7XG4gICAgY29uc3QgY2lyY2xlc1N0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGRlbGF5ID0gMTUwO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5jaXJjbGVzTnVtOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAuLi50aGlzLmNpcmNsZVN0eWxlLFxuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7aSAqIGRlbGF5fW1zYFxuICAgICAgfTtcbiAgICAgIGNpcmNsZXNTdHlsZXMucHVzaChzdHlsZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNpcmNsZXNTdHlsZXM7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcblxuICB9XG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtDaXJjbGVzVG9SaHVtYnVzZXNTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2NpcmNsZXMtdG8tcmh1bWJ1c2VzLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW0NpcmNsZXNUb1JodW1idXNlc1NwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtDaXJjbGVzVG9SaHVtYnVzZXNTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgQ2lyY2xlc1RvUmh1bWJ1c2VzU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWZpbmdlcnByaW50LXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJmaW5nZXJwcmludC1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3Bpbm5lci1yaW5nXCIgKm5nRm9yPVwibGV0IHJzIG9mIHJpbmdzU3R5bGVzXCIgW25nU3R5bGVdPVwicnNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cblxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9maW5nZXJwcmludC1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBGaW5nZXJwcmludFNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgc2l6ZSA9IDYwO1xuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiA9IDE1MDA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuXG4gIHJpbmdzTnVtID0gOTtcbiAgY29udGFpbmVyUGFkZGluZyA9IDI7XG5cbiAgZ2V0IG91dGVyUmluZ1NpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zaXplIC0gdGhpcy5jb250YWluZXJQYWRkaW5nICogMjtcbiAgfVxuXG4gIGdldCBzcGlubmVyU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgd2lkdGg6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICBwYWRkaW5nOiBgJHt0aGlzLmNvbnRhaW5lclBhZGRpbmd9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCByaW5nU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYm9yZGVyVG9wQ29sb3I6IHRoaXMuY29sb3IsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2BcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHJpbmdzU3R5bGVzKCk6IG9iamVjdCB7XG4gICAgY29uc3QgcmluZ3NTdHlsZXMgPSBbXTtcbiAgICBjb25zdCByaW5nQmFzZSA9IHRoaXMub3V0ZXJSaW5nU2l6ZSAvICh0aGlzLnJpbmdzTnVtKTtcbiAgICBjb25zdCByaW5nSW5jID0gcmluZ0Jhc2U7XG5cbiAgICBmb3IgKGxldCBpID0gMTsgaSA8PSB0aGlzLnJpbmdzTnVtOyBpKyspIHtcbiAgICAgIHJpbmdzU3R5bGVzLnB1c2goe1xuICAgICAgICAuLi50aGlzLnJpbmdTdHlsZSxcbiAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2kgKiA1MH1tc2AsXG4gICAgICAgIGhlaWdodDogYCR7cmluZ0Jhc2UgKyAoaSArIDEpICogcmluZ0luY31weGAsXG4gICAgICAgIHdpZHRoOiBgJHtyaW5nQmFzZSArIChpICsgMSkgKiByaW5nSW5jfXB4YCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiByaW5nc1N0eWxlcztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0ZpbmdlcnByaW50U3Bpbm5lckNvbXBvbmVudH0gZnJvbSAnLi9maW5nZXJwcmludC1zcGlubmVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtGaW5nZXJwcmludFNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtGaW5nZXJwcmludFNwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBGaW5nZXJwcmludFNwaW5uZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1mdWxmaWxsaW5nLWJvdW5jaW5nLWNpcmNsZS1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiZnVsZmlsbGluZy1ib3VuY2luZy1jaXJjbGUtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZVwiIFtuZ1N0eWxlXT1cImNpcmNsZVN0eWxlXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwib3JiaXRcIiBbbmdTdHlsZV09XCJvcmJpdFN0eWxlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL2Z1bGZpbGxpbmctYm91bmNpbmctY2lyY2xlLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEZ1bGZpbGxpbmdCb3VuY2luZ0NpcmNsZVNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgc2l6ZSA9IDYwO1xuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiA9IDQwMDA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuXG4gIGdldCBzcGlubmVyU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBvcmJpdFN0eWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyV2lkdGg6IGAke3RoaXMuc2l6ZSAqIDAuMDN9cHhgLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGVTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgd2lkdGg6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICBib3JkZXJDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyV2lkdGg6IGAke3RoaXMuc2l6ZSAqIDAuMX1weGAsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2BcbiAgICB9O1xuICB9XG5cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtGdWxmaWxsaW5nQm91bmNpbmdDaXJjbGVTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2Z1bGZpbGxpbmctYm91bmNpbmctY2lyY2xlLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW0Z1bGZpbGxpbmdCb3VuY2luZ0NpcmNsZVNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtGdWxmaWxsaW5nQm91bmNpbmdDaXJjbGVTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgRnVsZmlsbGluZ0JvdW5jaW5nQ2lyY2xlU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtZmxvd2VyLXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJmbG93ZXItc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImRvdHMtY29udGFpbmVyXCIgW25nU3R5bGVdPVwiZG90c0NvbnRhaW5lclN0eWxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJiaWdnZXItZG90XCIgW25nU3R5bGVdPVwiYmlnZ2VyRG90U3R5bGVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwic21hbGxlci1kb3RcIiBbbmdTdHlsZV09XCJzbWFsbGVyRG90U3R5bGVcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vZmxvd2VyLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEZsb3dlclNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBASW5wdXQoKSBzaXplID0gNzA7XG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMjUwMDtcbiAgQElucHV0KCkgY29sb3IgPSAnI2ZmZic7XG5cbiAgc21hbGxlckRvdEFuaW1hdGlvbkJhc2VOYW1lID0gJ2Zsb3dlci1zcGlubmVyLXNtYWxsZXItZG90LWFuaW1hdGlvbic7XG4gIGJpZ2dlckRvdEFuaW1hdGlvbkJhc2VOYW1lID0gJ2Zsb3dlci1zcGlubmVyLWJpZ2dlci1kb3QtYW5pbWF0aW9uJztcbiAgY3VycmVudFNtYWxsZXJEb3RBbmltYXRpb25CYXNlTmFtZSA9ICcnO1xuICBjdXJyZW50QmlnZ2VyRG90QW5pbWF0aW9uQmFzZU5hbWUgPSAnJztcblxuICBnZXQgZG90U2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemUgLyA3O1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGRvdHNDb250YWluZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogYCR7dGhpcy5jb2xvcn1weGAsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMuY29sb3J9cHhgLFxuICAgIH07XG4gIH1cblxuICBnZXQgc21hbGxlckRvdFN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29sb3IsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2AsXG4gICAgICBhbmltYXRpb25OYW1lOiB0aGlzLmN1cnJlbnRTbWFsbGVyRG90QW5pbWF0aW9uQmFzZU5hbWVcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGJpZ2dlckRvdFN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29sb3IsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2AsXG4gICAgICBhbmltYXRpb25OYW1lOiB0aGlzLmN1cnJlbnRCaWdnZXJEb3RBbmltYXRpb25CYXNlTmFtZVxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKCkge1xuXG4gIH1cblxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7Rmxvd2VyU3Bpbm5lckNvbXBvbmVudH0gZnJvbSAnLi9mbG93ZXItc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbRmxvd2VyU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW0Zsb3dlclNwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBGbG93ZXJTcGlubmVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtZnVsZmlsbGluZy1zcXVhcmUtc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImZ1bGZpbGxpbmctc3F1YXJlLXNwaW5uZXJcIiBbbmdTdHlsZV09XCJzcGlubmVyU3R5bGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcGlubmVyLWlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lcklubmVyU3R5bGVcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vZnVsZmlsbGluZy1zcXVhcmUtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgRnVsZmlsbGluZ1NxdWFyZVNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSA0MDAwO1xuICBASW5wdXQoKSBzaXplID0gNTA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuXG4gIGdldCBzcGlubmVyU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgYm9yZGVyQ29sb3I6IHRoaXMuY29sb3IsXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzcGlubmVySW5uZXJTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmFja2dyb3VuZENvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7RnVsZmlsbGluZ1NxdWFyZVNwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vZnVsZmlsbGluZy1zcXVhcmUtc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbRnVsZmlsbGluZ1NxdWFyZVNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtGdWxmaWxsaW5nU3F1YXJlU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIEZ1bGZpbGxpbmdTcXVhcmVTcGlubmVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtaGFsZi1jaXJjbGUtc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImhhbGYtY2lyY2xlLXNwaW5uZXJcIiBbbmdTdHlsZV09XCJzcGlubmVyU3R5bGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaXJjbGUgY2lyY2xlLTFcIiBbbmdTdHlsZV09XCJjaXJjbGUxU3R5bGVcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJjaXJjbGUgY2lyY2xlLTJcIiBbbmdTdHlsZV09XCJjaXJjbGUyU3R5bGVcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vaGFsZi1jaXJjbGUtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSGFsZkNpcmNsZVNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAxMDAwO1xuICBASW5wdXQoKSBzaXplID0gNjA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuXG4gIGdldCBzcGlubmVyU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgLFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvcmRlcldpZHRoOiBgJHt0aGlzLnNpemUgLyAxMH1weGAsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2BcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGNpcmNsZTFTdHlsZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLi4udGhpcy5jaXJjbGVTdHlsZSxcbiAgICAgIGJvcmRlclRvcENvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGUyU3R5bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLnRoaXMuY2lyY2xlU3R5bGUsXG4gICAgICBib3JkZXJCb3R0b21Db2xvcjogdGhpcy5jb2xvclxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtIYWxmQ2lyY2xlU3Bpbm5lckNvbXBvbmVudH0gZnJvbSAnLi9oYWxmLWNpcmNsZS1zcGlubmVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtIYWxmQ2lyY2xlU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW0hhbGZDaXJjbGVTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgSGFsZkNpcmNsZVNwaW5uZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1ob2xsb3ctZG90cy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiaG9sbG93LWRvdHMtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImRvdFwiICpuZ0Zvcj1cImxldCBkcyBvZiBkb3RzU3R5bGVzXCIgW25nU3R5bGVdPVwiZHNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vaG9sbG93LWRvdHMtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSG9sbG93RG90c1NwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAxMDAwO1xuICBASW5wdXQoKSBkb3RTaXplID0gMTU7XG4gIEBJbnB1dCgpIGRvdHNOdW0gPSAzO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBnZXQgaG9yaXpvbnRhbE1hcmdpbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmRvdFNpemUgLyAyO1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuZG90U2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5kb3RTaXplfXB4YCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGRvdFN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBgJHt0aGlzLmRvdFNpemV9cHhgLFxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLmRvdFNpemV9cHhgLFxuICAgICAgbWFyZ2luOiBgMCAke3RoaXMuaG9yaXpvbnRhbE1hcmdpbn1weGAsXG4gICAgICBib3JkZXJXaWR0aDogYCR7dGhpcy5kb3RTaXplIC8gNX1weGAsXG4gICAgICBib3JkZXJDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBnZXQgZG90c1N0eWxlcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IGRvdHNTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBkZWxheU1vZGlmaWVyID0gMC4zO1xuICAgIGNvbnN0IGJhc2ljRGVsYXkgPSAxMDAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5kb3RzTnVtOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAuLi50aGlzLmRvdFN0eWxlLFxuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7YmFzaWNEZWxheSAqIGkgKiBkZWxheU1vZGlmaWVyfW1zYFxuICAgICAgfTtcblxuICAgICAgZG90c1N0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZG90c1N0eWxlcztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0hvbGxvd0RvdHNTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2hvbGxvdy1kb3RzLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW0hvbGxvd0RvdHNTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbSG9sbG93RG90c1NwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBIb2xsb3dEb3RzU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1pbnRlcnNlY3RpbmctY2lyY2xlcy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiaW50ZXJzZWN0aW5nLWNpcmNsZXMtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNwaW5uZXJCbG9ja1wiIFtuZ1N0eWxlXT1cInNwaW5uZXJCbG9ja1N0eWxlXCI+XG4gICAgICAgIDxzcGFuIGNsYXNzPVwiY2lyY2xlXCIgKm5nRm9yPVwibGV0IGNzIG9mIGNpcmNsZVN0eWxlc1wiIFtuZ1N0eWxlXT1cImNzXCI+PC9zcGFuPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL2ludGVyc2VjdGluZy1jaXJjbGVzLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGluZ0NpcmNsZXNTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMTIwMDtcbiAgQElucHV0KCkgc2l6ZSA9IDcwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBnZXQgY2lyY2xlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemUgLyAyO1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgc3Bpbm5lckJsb2NrU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgLFxuICAgICAgd2lkdGg6IGAke3RoaXMuY2lyY2xlU2l6ZX1weGAsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMuY2lyY2xlU2l6ZX1weGBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGNpcmNsZVN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGVTdHlsZXMoKTogb2JqZWN0IHtcbiAgICBjb25zdCBjaXJjbGVzUG9zaXRpb25zID0gW1xuICAgICAge3RvcDogMCwgbGVmdDogMH0sXG4gICAgICB7bGVmdDogYCR7dGhpcy5jaXJjbGVTaXplICogLTAuMzZ9cHhgLCB0b3A6IGAke3RoaXMuY2lyY2xlU2l6ZSAqIDAuMn1weGB9LFxuICAgICAge2xlZnQ6IGAke3RoaXMuY2lyY2xlU2l6ZSAqIC0wLjM2fXB4YCwgdG9wOiBgJHt0aGlzLmNpcmNsZVNpemUgKiAtMC4yfXB4YH0sXG4gICAgICB7bGVmdDogMCwgdG9wOiBgJHt0aGlzLmNpcmNsZVNpemUgKiAtMC4zNn1weGB9LFxuICAgICAge2xlZnQ6IGAke3RoaXMuY2lyY2xlU2l6ZSAqIDAuMzZ9cHhgLCB0b3A6IGAke3RoaXMuY2lyY2xlU2l6ZSAqIC0wLjJ9cHhgfSxcbiAgICAgIHtsZWZ0OiBgJHt0aGlzLmNpcmNsZVNpemUgKiAwLjM2fXB4YCwgdG9wOiBgJHt0aGlzLmNpcmNsZVNpemUgKiAwLjJ9cHhgfSxcbiAgICAgIHtsZWZ0OiAwLCB0b3A6IGAke3RoaXMuY2lyY2xlU2l6ZSAqIDAuMzZ9cHhgfVxuICAgIF07XG5cbiAgICByZXR1cm4gY2lyY2xlc1Bvc2l0aW9ucy5tYXAoKGNwKSA9PiB7XG4gICAgICByZXR1cm4ge2NwLCAuLi50aGlzLmNpcmNsZVN0eWxlfTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0ludGVyc2VjdGluZ0NpcmNsZXNTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2ludGVyc2VjdGluZy1jaXJjbGVzLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW0ludGVyc2VjdGluZ0NpcmNsZXNTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbSW50ZXJzZWN0aW5nQ2lyY2xlc1NwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBJbnRlcnNlY3RpbmdDaXJjbGVzU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLWxvb3BpbmctcmhvbWJ1c2VzLXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJsb29waW5nLXJob21idXNlcy1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicmhvbWJ1c1wiXG4gICAgICAgICAgICpuZ0Zvcj1cImxldCBycyBvZiByaG9tYnVzZXNTdHlsZXNcIlxuICAgICAgICAgICBbbmdTdHlsZV09XCJyc1wiPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL2xvb3BpbmctcmhvbWJ1c2VzLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExvb3BpbmdSaHVtYnVzZXNTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMjUwMDtcbiAgQElucHV0KCkgcmhvbWJ1c1NpemUgPSAxNTtcbiAgQElucHV0KCkgY29sb3IgPSAnI2ZmZic7XG5cbiAgcmhvbWJ1c2VzTnVtID0gMztcblxuICBnZXQgc3Bpbm5lclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5yaG9tYnVzU2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5yaG9tYnVzU2l6ZSAqIDR9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCByaG9tYnVzU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnJob21idXNTaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnJob21idXNTaXplfXB4YCxcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29sb3IsXG4gICAgICBhbmltYXRpb25EdXJhdGlvbjogYCR7dGhpcy5hbmltYXRpb25EdXJhdGlvbn1tc2AsXG4gICAgICBsZWZ0OiBgJHt0aGlzLnJob21idXNTaXplICogNH1weGBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHJob21idXNlc1N0eWxlcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IHJob21idXNlc1N0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGRlbGF5ID0gLXRoaXMuYW5pbWF0aW9uRHVyYXRpb24gLyAxLjU7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5yaG9tYnVzZXNOdW07IGkrKykge1xuICAgICAgY29uc3Qgc3R5bGUgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2kgKiBkZWxheX1tc2BcbiAgICAgIH0sIHRoaXMucmhvbWJ1c1N0eWxlKTtcbiAgICAgIHJob21idXNlc1N0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICB9XG4gICAgcmV0dXJuIHJob21idXNlc1N0eWxlcztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIFxuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge0xvb3BpbmdSaHVtYnVzZXNTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL2xvb3Bpbmctcmh1bWJ1c2VzLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW0xvb3BpbmdSaHVtYnVzZXNTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbTG9vcGluZ1JodW1idXNlc1NwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBMb29waW5nUmh1bWJ1c2VzU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1vcmJpdC1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwib3JiaXQtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm9yYml0IG9uZVwiIFtuZ1N0eWxlXT1cIm9yYml0U3R5bGVcIj48L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJvcmJpdCB0d29cIiBbbmdTdHlsZV09XCJvcmJpdFN0eWxlXCI+PC9kaXY+XG4gICAgICA8ZGl2IGNsYXNzPVwib3JiaXQgdGhyZWVcIiBbbmdTdHlsZV09XCJvcmJpdFN0eWxlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL29yYml0LXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIE9yYml0U3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiA9IDEwMDA7XG4gIEBJbnB1dCgpIHNpemUgPSA1MDtcbiAgQElucHV0KCkgY29sb3IgPSAnI2ZmZic7XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgb3JiaXRTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBib3JkZXJDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtPcmJpdFNwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vb3JiaXQtc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbT3JiaXRTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbT3JiaXRTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgT3JiaXRTcGlubmVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtcGl4ZWwtc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInBpeGVsLXNwaW5uZXJcIiBbbmdTdHlsZV09XCJzcGlubmVyU3R5bGVcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJwaXhlbC1zcGlubmVyLWlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lcklubmVyU3R5bGVcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vcGl4ZWwtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUGl4ZWxTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMTAwMDtcbiAgQElucHV0KCkgc2l6ZSA9IDUwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBhbmltYXRpb25CYXNlTmFtZSA9ICdwaXhlbC1zcGlubmVyLWFuaW1hdGlvbic7XG4gIGN1cnJlbnRBbmltYXRpb25OYW1lID0gJyc7XG5cbiAgZ2V0IHBpeGVsU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemUgLyA3O1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgc3Bpbm5lcklubmVyU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgLFxuICAgICAgYW5pbWF0aW9uTmFtZTogdGhpcy5jdXJyZW50QW5pbWF0aW9uTmFtZSxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnBpeGVsU2l6ZX1weGAsXG4gICAgICBoZWlnaHQ6IGAke3RoaXMucGl4ZWxTaXplfXB4YCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm94U2hhZG93OiBgXG4gICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMucGl4ZWxTaXplICogMS41fXB4ICR7dGhpcy5waXhlbFNpemUgKiAxLjV9cHggMCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBpeGVsU2l6ZSAqIC0xLjV9cHggJHt0aGlzLnBpeGVsU2l6ZSAqIC0xLjV9cHggMCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBpeGVsU2l6ZSAqIDEuNX1weCAke3RoaXMucGl4ZWxTaXplICogLTEuNX1weCAwIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMucGl4ZWxTaXplICogLTEuNX1weCAke3RoaXMucGl4ZWxTaXplICogMS41fXB4IDAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIDAgJHt0aGlzLnBpeGVsU2l6ZSAqIDEuNX1weCAwIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAke3RoaXMucGl4ZWxTaXplICogMS41fXB4IDAgMCAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgJHt0aGlzLnBpeGVsU2l6ZSAqIC0xLjV9cHggMCAwIDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAwICR7dGhpcy5waXhlbFNpemUgKiAtMS41fXB4IDAgMFxuICAgICAgICAgICAgICAgICAgICAgIGBcbiAgICB9O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7UGl4ZWxTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL3BpeGVsLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1BpeGVsU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW1BpeGVsU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFBpeGVsU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1yYWRhci1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwicmFkYXItc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZVwiICpuZ0Zvcj1cImxldCBjcyBvZiBjaXJjbGVzU3R5bGVzXCIgW25nU3R5bGVdPVwiY3NcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZS1pbm5lci1jb250YWluZXJcIiBbbmdTdHlsZV09XCJjaXJjbGVJbm5lckNvbnRhaW5lclN0eWxlXCI+XG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZS1pbm5lclwiIFtuZ1N0eWxlXT1cImNpcmNsZUlubmVyU3R5bGVcIj48L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vcmFkYXItc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgUmFkYXJTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIHNpemUgPSAxMTA7XG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMjAwMDtcbiAgQElucHV0KCkgY29sb3IgPSAnI2ZmZic7XG5cbiAgcHJpdmF0ZSBjaXJjbGVzTnVtID0gNDtcblxuICBnZXQgYm9yZGVyV2lkdGgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zaXplICogNSAvIDExMDtcbiAgfVxuXG4gIGdldCBzcGlubmVyU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgd2lkdGg6IGAke3RoaXMuc2l6ZX1weGBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGNpcmNsZVN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlSW5uZXJDb250YWluZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBib3JkZXJXaWR0aDogYCR7dGhpcy5ib3JkZXJXaWR0aH1weGBcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGNpcmNsZUlubmVyU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYm9yZGVyTGVmdENvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyUmlnaHRDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGJvcmRlcldpZHRoOiBgJHt0aGlzLmJvcmRlcldpZHRofXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlc1N0eWxlcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IGNpcmNsZXNTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBkZWxheSA9IHRoaXMuYW5pbWF0aW9uRHVyYXRpb24gKiAwLjE1O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaXJjbGVzTnVtOyBpKyspIHtcbiAgICAgIGNpcmNsZXNTdHlsZXMucHVzaChPYmplY3QuYXNzaWduKHtcbiAgICAgICAgcGFkZGluZzogYCR7dGhpcy5ib3JkZXJXaWR0aCAqIDIgKiBpfXB4YCxcbiAgICAgICAgYW5pbWF0aW9uRGVsYXk6IGAke2kgPT09IHRoaXMuY2lyY2xlc051bSAtIDEgPyAwIDogZGVsYXl9bXNgXG4gICAgICB9LCB0aGlzLmNpcmNsZVN0eWxlKSk7XG4gICAgfVxuICAgIHJldHVybiBjaXJjbGVzU3R5bGVzO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gIH1cblxufVxuIiwiaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7UmFkYXJTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL3JhZGFyLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1JhZGFyU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW1JhZGFyU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFJhZGFyU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1zY2FsaW5nLXNxdWFyZXMtc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInNjYWxpbmctc3F1YXJlcy1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3F1YXJlXCJcbiAgICAgICAgICAgKm5nRm9yPVwibGV0IHNzIG9mIHNxdWFyZXNTdHlsZXM7IGxldCBpID0gaW5kZXg7XCJcbiAgICAgICAgICAgW25nQ2xhc3NdPVwiY2hpbGRDbGFzcyhpKVwiXG4gICAgICAgICAgIFtuZ1N0eWxlXT1cInNzXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vc2NhbGluZy1zcXVhcmVzLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFNjYWxpbmdTcXVhcmVzU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBASW5wdXQoKSBzaXplID0gNjU7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiA9IDEyNTA7XG5cbiAgc3F1YXJlc051bSA9IDQ7XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBnZXQgc3F1YXJlU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemUgKiAwLjI1IC8gMS4zfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemUgKiAwLjI1IC8gMS4zfXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgICAgIGJvcmRlcldpZHRoOiBgJHt0aGlzLnNpemUgKiAwLjA0IC8gMS4zfXB4YCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzcXVhcmVzU3R5bGVzKCk6IG9iamVjdCB7XG4gICAgY29uc3Qgc3F1YXJlc1N0eWxlcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuc3F1YXJlc051bTsgaSsrKSB7XG4gICAgICBzcXVhcmVzU3R5bGVzLnB1c2goey4uLnRoaXMuc3F1YXJlU3R5bGV9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNxdWFyZXNTdHlsZXM7XG4gIH1cblxuICBjaGlsZENsYXNzKGkpIHtcbiAgICByZXR1cm4gYHNxdWFyZS0ke2kgKyAxfWA7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtTY2FsaW5nU3F1YXJlc1NwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vc2NhbGluZy1zcXVhcmVzLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1NjYWxpbmdTcXVhcmVzU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW1NjYWxpbmdTcXVhcmVzU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFNjYWxpbmdTcXVhcmVzU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1zZWxmLWJ1aWxkaW5nLXNxdWFyZS1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwic2VsZi1idWlsZGluZy1zcXVhcmUtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cInNxdWFyZVwiXG4gICAgICAgICAgICpuZ0Zvcj1cImxldCBzcyBvZiBzcXVhcmVzU3R5bGVzOyBsZXQgaSA9IGluZGV4O1wiXG4gICAgICAgICAgIFtuZ1N0eWxlXT1cInNzXCJcbiAgICAgICAgICAgW25nQ2xhc3NdPVwieydjbGVhcic6IGkgJiYgaSAlIDMgPT09IDB9XCJcbiAgICAgID5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9zZWxmLWJ1aWxkaW5nLXNxdWFyZS1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTZWxmQnVpbGRpbmdTcXVhcmVTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gNjAwMDtcbiAgQElucHV0KCkgc2l6ZSA9IDQwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBzcXVhcmVzTnVtID0gOTtcblxuICBnZXQgc3F1YXJlU2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemUgLyA0O1xuICB9XG5cbiAgZ2V0IGluaXRpYWxUb3BQb3NpdGlvbigpOiBudW1iZXIge1xuICAgIHJldHVybiAtdGhpcy5zcXVhcmVTaXplICogMiAvIDM7XG4gIH1cblxuICBnZXQgc3Bpbm5lclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRvcDogYCR7LXRoaXMuaW5pdGlhbFRvcFBvc2l0aW9ufXB4YCxcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzcXVhcmVTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc3F1YXJlU2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zcXVhcmVTaXplfXB4YCxcbiAgICAgIHRvcDogYCR7dGhpcy5pbml0aWFsVG9wUG9zaXRpb259cHhgLFxuICAgICAgbWFyZ2luUmlnaHQ6IGAke3RoaXMuc3F1YXJlU2l6ZSAvIDN9cHhgLFxuICAgICAgbWFyZ2luVG9wOiBgJHt0aGlzLnNxdWFyZVNpemUgLyAzfXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgICAgIGJhY2tncm91bmQ6IHRoaXMuY29sb3JcbiAgICB9O1xuICB9XG5cbiAgZ2V0IHNxdWFyZXNTdHlsZXMoKTogb2JqZWN0IHtcbiAgICBjb25zdCBzcXVhcmVzU3R5bGVzID0gW107XG4gICAgY29uc3QgZGVsYXlzTXVsdGlwbGllcnMgPSBbNiwgNywgOCwgMywgNCwgNSwgMCwgMSwgMl07XG4gICAgY29uc3QgZGVsYXlNb2RpZmllciA9IHRoaXMuYW5pbWF0aW9uRHVyYXRpb24gKiAwLjA1O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zcXVhcmVzTnVtOyBpKyspIHtcbiAgICAgIHNxdWFyZXNTdHlsZXMucHVzaCh7XG4gICAgICAgIGFuaW1hdGlvbkRlbGF5OiBgJHtkZWxheU1vZGlmaWVyICogZGVsYXlzTXVsdGlwbGllcnNbaV19bXNgLFxuICAgICAgICAuLi50aGlzLnNxdWFyZVN0eWxlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNxdWFyZXNTdHlsZXM7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtTZWxmQnVpbGRpbmdTcXVhcmVTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL3NlbGYtYnVpbGRpbmctc3F1YXJlLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1NlbGZCdWlsZGluZ1NxdWFyZVNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtTZWxmQnVpbGRpbmdTcXVhcmVTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgU2VsZkJ1aWxkaW5nU3F1YXJlU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1zZW1pcG9sYXItc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInNlbWlwb2xhci1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwicmluZ1wiICpuZ0Zvcj1cImxldCBycyBvZiByaW5nc1N0eWxlc1wiIFtuZ1N0eWxlXT1cInJzXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gIGAsXG4gIHN0eWxlVXJsczogWycuL3NlbWlwb2xhci1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTZW1pcG9sYXJTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMjAwMDtcbiAgQElucHV0KCkgc2l6ZSA9IDY1O1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICByaW5nc051bSA9IDU7XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgcmluZ1N0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgICAgIGJvcmRlclRvcENvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyTGVmdENvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGdldCByaW5nc1N0eWxlcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IHJpbmdzU3R5bGVzID0gW107XG4gICAgY29uc3QgZGVsYXlNb2RpZmllciA9IDAuMTtcbiAgICBjb25zdCByaW5nV2lkdGggPSB0aGlzLnNpemUgKiAwLjA1O1xuICAgIGNvbnN0IHBvc2l0aW9uSW5jcmVtZW50ID0gcmluZ1dpZHRoICogMjtcbiAgICBjb25zdCBzaXplRGVjcmVtZW50ID0gdGhpcy5zaXplICogMC4yO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJpbmdzTnVtOyBpKyspIHtcbiAgICAgIGNvbnN0IGNvbXB1dGVkU2l6ZSA9IGAke3RoaXMuc2l6ZSAtIHNpemVEZWNyZW1lbnQgKiBpfXB4YDtcbiAgICAgIGNvbnN0IGNvbXB1dGVkUG9zaXRpb24gPSBgJHtwb3NpdGlvbkluY3JlbWVudCAqIGl9cHhgO1xuICAgICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICAgIGFuaW1hdGlvbkRlbGF5OiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9uICogZGVsYXlNb2RpZmllciAqICh0aGlzLnJpbmdzTnVtIC0gaSAtIDEpfW1zYCxcbiAgICAgICAgaGVpZ2h0OiBjb21wdXRlZFNpemUsXG4gICAgICAgIHdpZHRoOiBjb21wdXRlZFNpemUsXG4gICAgICAgIGxlZnQ6IGNvbXB1dGVkUG9zaXRpb24sXG4gICAgICAgIHRvcDogY29tcHV0ZWRQb3NpdGlvbixcbiAgICAgICAgYm9yZGVyV2lkdGg6IGAke3JpbmdXaWR0aH1weGAsXG4gICAgICAgIC4uLnRoaXMucmluZ1N0eWxlXG4gICAgICB9O1xuICAgICAgcmluZ3NTdHlsZXMucHVzaChzdHlsZSk7XG4gICAgfVxuICAgIHJldHVybiByaW5nc1N0eWxlcztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1NlbWlwb2xhclNwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vc2VtaXBvbGFyLXNwaW5uZXIuY29tcG9uZW50JztcbmltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbQ29tbW9uTW9kdWxlXSxcbiAgZXhwb3J0czogW1NlbWlwb2xhclNwaW5uZXJDb21wb25lbnRdLFxuICBkZWNsYXJhdGlvbnM6IFtTZW1pcG9sYXJTcGlubmVyQ29tcG9uZW50XSxcbiAgcHJvdmlkZXJzOiBbXSxcbn0pXG5leHBvcnQgY2xhc3MgU2VtaXBvbGFyU3Bpbm5lck1vZHVsZSB7XG59XG4iLCJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1zcHJpbmctc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInNwcmluZy1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3ByaW5nLXNwaW5uZXItcGFydCB0b3BcIiBbbmdTdHlsZV09XCJzcGlubmVyUGFydFN0eWxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJzcHJpbmctc3Bpbm5lci1yb3RhdG9yXCIgW25nU3R5bGVdPVwicm90YXRvclN0eWxlXCI+PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJzcHJpbmctc3Bpbm5lci1wYXJ0IGJvdHRvbVwiIFtuZ1N0eWxlXT1cInNwaW5uZXJQYXJ0U3R5bGVcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cInNwcmluZy1zcGlubmVyLXJvdGF0b3JcIiBbbmdTdHlsZV09XCJyb3RhdG9yU3R5bGVcIj48L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9zcHJpbmctc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgU3ByaW5nU3Bpbm5lckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBASW5wdXQoKSBzaXplID0gNjA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuICBASW5wdXQoKSBhbmltYXRpb25EdXJhdGlvbiA9IDIwMDA7XG5cbiAgYW5pbWF0aW9uQmFzZU5hbWUgPSAnc3ByaW5nLXNwaW5uZXItYW5pbWF0aW9uJztcbiAgY3VycmVudEFuaW1hdGlvbk5hbWUgPSAnJztcblxuICBnZXQgc3Bpbm5lclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzcGlubmVyUGFydFN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplIC8gMn1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgcm90YXRvclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgYm9yZGVyUmlnaHRDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGJvcmRlclRvcENvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyV2lkdGg6IGAke3RoaXMuc2l6ZSAvIDd9cHhgLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgLFxuICAgICAgYW5pbWF0aW9uTmFtZTogdGhpcy5jdXJyZW50QW5pbWF0aW9uTmFtZVxuICAgIH07XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtTcHJpbmdTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL3NwcmluZy1zcGlubmVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtTcHJpbmdTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbU3ByaW5nU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFNwcmluZ1NwaW5uZXJNb2R1bGUge1xufVxuIiwiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhcHAtc3dhcHBpbmctc3F1YXJlcy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwic3dhcHBpbmctc3F1YXJlcy1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwic3F1YXJlXCJcbiAgICAgICAgICAgKm5nRm9yPVwibGV0IHNzIG9mIHNxdWFyZXNTdHlsZXM7IGxldCBpID0gaW5kZXg7XCJcbiAgICAgICAgICAgW25nQ2xhc3NdPVwiJ3NxdWFyZS0nICsgKGkgKyAxKVwiXG4gICAgICAgICAgIFtuZ1N0eWxlXT1cInNzXCI+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vc3dhcHBpbmctc3F1YXJlcy1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBTd2FwcGluZ1NxdWFyZXNTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIEBJbnB1dCgpIGFuaW1hdGlvbkR1cmF0aW9uID0gMTAwMDtcbiAgQElucHV0KCkgc2l6ZSA9IDY1O1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBhbmltYXRpb25CYXNlTmFtZSA9ICdzd2FwcGluZy1zcXVhcmUtYW5pbWF0aW9uLWNoaWxkJztcbiAgc3F1YXJlc051bSA9IDQ7XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgc3F1YXJlU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgaGVpZ2h0OiBgJHt0aGlzLnNpemUgKiAwLjI1IC8gMS4zfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemUgKiAwLjI1IC8gMS4zfXB4YCxcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYCxcbiAgICAgIGJvcmRlcldpZHRoOiBgJHt0aGlzLnNpemUgKiAwLjA0IC8gMS4zfXB4YCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yXG4gICAgfTtcbiAgfVxuXG4gIGdldCBzcXVhcmVzU3R5bGVzKCk6IG9iamVjdCB7XG4gICAgY29uc3Qgc3F1YXJlc1N0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5hbmltYXRpb25EdXJhdGlvbiAqIDAuNTtcblxuICAgIGZvciAobGV0IGkgPSAxOyBpIDw9IHRoaXMuc3F1YXJlc051bTsgaSsrKSB7XG4gICAgICBzcXVhcmVzU3R5bGVzLnB1c2goe1xuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7aSAlIDIgPT09IDAgPyBkZWxheSA6IDB9bXNgLFxuICAgICAgICAuLi50aGlzLnNxdWFyZVN0eWxlXG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHNxdWFyZXNTdHlsZXM7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iLCJpbXBvcnQge05nTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtTd2FwcGluZ1NxdWFyZXNTcGlubmVyQ29tcG9uZW50fSBmcm9tICcuL3N3YXBwaW5nLXNxdWFyZXMtc3Bpbm5lci5jb21wb25lbnQnO1xuaW1wb3J0IHtDb21tb25Nb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtDb21tb25Nb2R1bGVdLFxuICBleHBvcnRzOiBbU3dhcHBpbmdTcXVhcmVzU3Bpbm5lckNvbXBvbmVudF0sXG4gIGRlY2xhcmF0aW9uczogW1N3YXBwaW5nU3F1YXJlc1NwaW5uZXJDb21wb25lbnRdLFxuICBwcm92aWRlcnM6IFtdLFxufSlcbmV4cG9ydCBjbGFzcyBTd2FwcGluZ1NxdWFyZXNTcGlubmVyTW9kdWxlIHtcbn1cbiIsImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLXRyaW5pdHktcmluZ3Mtc3Bpbm5lcicsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cInRyaW5pdHktcmluZ3Mtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZSBjaXJjbGUxXCIgW25nU3R5bGVdPVwicmluZzFTdHlsZVwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZSBjaXJjbGUzXCIgW25nU3R5bGVdPVwicmluZzNTdHlsZVwiPjwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cImNpcmNsZSBjaXJjbGUyXCIgW25nU3R5bGVdPVwicmluZzJTdHlsZVwiPjwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi90cmluaXR5LXJpbmdzLXNwaW5uZXIuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRyaW5pdHlSaW5nc1NwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgY29udGFpbmVyUGFkZGluZyA9IDM7XG5cbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAxNTAwO1xuICBASW5wdXQoKSBzaXplID0gNjA7XG4gIEBJbnB1dCgpIGNvbG9yID0gJyNmZmYnO1xuXG4gIGdldCBvdXRlclJpbmdTaXplKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc2l6ZSAtIHRoaXMuY29udGFpbmVyUGFkZGluZyAqIDI7XG4gIH1cblxuICBnZXQgc3Bpbm5lclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5zaXplfXB4YCxcbiAgICAgIHdpZHRoOiBgJHt0aGlzLnNpemV9cHhgLFxuICAgICAgcGFkZGluZzogYCR7dGhpcy5jb250YWluZXJQYWRkaW5nfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgcmluZzFTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMub3V0ZXJSaW5nU2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5vdXRlclJpbmdTaXplfXB4YCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgXG4gICAgfTtcbiAgfVxuXG4gIGdldCByaW5nMlN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhlaWdodDogYCR7dGhpcy5vdXRlclJpbmdTaXplICogMC42NX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5vdXRlclJpbmdTaXplICogMC42NX1weGAsXG4gICAgICBib3JkZXJDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBnZXQgcmluZzNTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMub3V0ZXJSaW5nU2l6ZSAqIDAuMX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5vdXRlclJpbmdTaXplICogMC4xfXB4YCxcbiAgICAgIGJvcmRlckNvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgXG4gICAgfTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiIsImltcG9ydCB7TmdNb2R1bGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge1RyaW5pdHlSaW5nc1NwaW5uZXJDb21wb25lbnR9IGZyb20gJy4vdHJpbml0eS1yaW5ncy1zcGlubmVyLmNvbXBvbmVudCc7XG5pbXBvcnQge0NvbW1vbk1vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW0NvbW1vbk1vZHVsZV0sXG4gIGV4cG9ydHM6IFtUcmluaXR5UmluZ3NTcGlubmVyQ29tcG9uZW50XSxcbiAgZGVjbGFyYXRpb25zOiBbVHJpbml0eVJpbmdzU3Bpbm5lckNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG59KVxuZXhwb3J0IGNsYXNzIFRyaW5pdHlSaW5nc1NwaW5uZXJNb2R1bGUge1xufVxuIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7SUFvQkU7UUFHUyxTQUFJLEdBQUcsRUFBRSxDQUFDO1FBQ1Ysc0JBQWlCLEdBQUcsSUFB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 \n",null]}