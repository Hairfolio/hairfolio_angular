/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class RadarSpinnerComponent {
    constructor() {
        this.size = 110;
        this.animationDuration = 2000;
        this.color = '#fff';
        this.circlesNum = 4;
    }
    /**
     * @return {?}
     */
    get borderWidth() {
        return this.size * 5 / 110;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.size}px`,
            width: `${this.size}px`
        };
    }
    /**
     * @return {?}
     */
    get circleStyle() {
        return {
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get circleInnerContainerStyle() {
        return {
            borderWidth: `${this.borderWidth}px`
        };
    }
    /**
     * @return {?}
     */
    get circleInnerStyle() {
        return {
            borderLeftColor: this.color,
            borderRightColor: this.color,
            borderWidth: `${this.borderWidth}px`
        };
    }
    /**
     * @return {?}
     */
    get circlesStyles() {
        /** @type {?} */
        const circlesStyles = [];
        /** @type {?} */
        const delay = this.animationDuration * 0.15;
        for (let i = 0; i < this.circlesNum; i++) {
            circlesStyles.push(Object.assign({
                padding: `${this.borderWidth * 2 * i}px`,
                animationDelay: `${i === this.circlesNum - 1 ? 0 : delay}ms`
            }, this.circleStyle));
        }
        return circlesStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
RadarSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-radar-spinner',
                template: `
    <div class="radar-spinner" [ngStyle]="spinnerStyle">
      <div class="circle" *ngFor="let cs of circlesStyles" [ngStyle]="cs">
        <div class="circle-inner-container" [ngStyle]="circleInnerContainerStyle">
          <div class="circle-inner" [ngStyle]="circleInnerStyle"></div>
        </div>
      </div>
    </div>
  `,
                styles: [".radar-spinner,.radar-spinner *{box-sizing:border-box}.radar-spinner{height:60px;width:60px;position:relative}.radar-spinner .circle{position:absolute;height:100%;width:100%;top:0;left:0;-webkit-animation:2s infinite radar-spinner-animation;animation:2s infinite radar-spinner-animation}.radar-spinner .circle:nth-child(1){padding:calc(60px * 5 * 2 * 0 / 110);-webkit-animation-delay:.3s;animation-delay:.3s}.radar-spinner .circle:nth-child(2){padding:calc(60px * 5 * 2 * 1 / 110);-webkit-animation-delay:.3s;animation-delay:.3s}.radar-spinner .circle:nth-child(3){padding:calc(60px * 5 * 2 * 2 / 110);-webkit-animation-delay:.3s;animation-delay:.3s}.radar-spinner .circle:nth-child(4){padding:calc(60px * 5 * 2 * 3 / 110);-webkit-animation-delay:0s;animation-delay:0s}.radar-spinner .circle-inner,.radar-spinner .circle-inner-container{height:100%;width:100%;border-radius:50%;border:solid transparent}.radar-spinner .circle-inner{border-left-color:#ff1d5e;border-right-color:#ff1d5e}@-webkit-keyframes radar-spinner-animation{50%{-webkit-transform:rotate(180deg);transform:rotate(180deg)}100%{-webkit-transform:rotate(0);transform:rotate(0)}}@keyframes radar-spinner-animation{50%{-webkit-transform:rotate(180deg);transform:rotate(180deg)}100%{-webkit-transform:rotate(0);transform:rotate(0)}}"]
            }] }
];
/** @nocollapse */
RadarSpinnerComponent.ctorParameters = () => [];
RadarSpinnerComponent.propDecorators = {
    size: [{ type: Input }],
    animationDuration: [{ type: Input }],
    color: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    RadarSpinnerComponent.prototype.size;
    /** @type {?} */
    RadarSpinnerComponent.prototype.animationDuration;
    /** @type {?} */
    RadarSpinnerComponent.prototype.color;
    /** @type {?} */
    RadarSpinnerComponent.prototype.circlesNum;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkYXItc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvIiwic291cmNlcyI6WyJzcmMvYXBwL3JhZGFyLXNwaW5uZXIvcmFkYXItc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFTLE1BQU0sZUFBZSxDQUFDO0FBZXZELE1BQU0sT0FBTyxxQkFBcUI7SUFFaEM7UUFHUyxTQUFJLEdBQUcsR0FBRyxDQUFDO1FBQ1gsc0JBQWlCLEdBQUcsSUFBSSxDQUFDO1FBQ3pCLFVBQUssR0FBRyxNQUFNLENBQUM7UUFFaEIsZUFBVSxHQUFHLENBQUMsQ0FBQztJQU52QixDQUFDOzs7O0lBUUQsSUFBSSxXQUFXO1FBQ2IsT0FBTyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNkLE9BQU87WUFDTCxNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJO1lBQ3hCLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLElBQUk7U0FDeEIsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxJQUFJLFdBQVc7UUFDYixPQUFPO1lBQ0wsaUJBQWlCLEVBQUUsR0FBRyxJQUFJLENBQUMsaUJBQWlCLElBQUk7U0FDakQsQ0FBQztJQUNKLENBQUM7Ozs7SUFFRCxJQUFJLHlCQUF5QjtRQUMzQixPQUFPO1lBQ0wsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSTtTQUNyQyxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELElBQUksZ0JBQWdCO1FBQ2xCLE9BQU87WUFDTCxlQUFlLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDM0IsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDNUIsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsSUFBSTtTQUNyQyxDQUFDO0lBQ0osQ0FBQzs7OztJQUVELElBQUksYUFBYTs7Y0FDVCxhQUFhLEdBQUcsRUFBRTs7Y0FDbEIsS0FBSyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxJQUFJO1FBQzNDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3hDLGFBQWEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDL0IsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLFdBQVcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJO2dCQUN4QyxjQUFjLEVBQUUsR0FBRyxDQUFDLEtBQUssSUFBSSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJO2FBQzdELEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7U0FDdkI7UUFDRCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7OztZQXBFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG1CQUFtQjtnQkFDN0IsUUFBUSxFQUFFOzs7Ozs7OztHQVFUOzthQUVGOzs7OzttQkFNRSxLQUFLO2dDQUNMLEtBQUs7b0JBQ0wsS0FBSzs7OztJQUZOLHFDQUFvQjs7SUFDcEIsa0RBQWtDOztJQUNsQyxzQ0FBd0I7O0lBRXhCLDJDQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnYXBwLXJhZGFyLXNwaW5uZXInLFxuICB0ZW1wbGF0ZTogYFxuICAgIDxkaXYgY2xhc3M9XCJyYWRhci1zcGlubmVyXCIgW25nU3R5bGVdPVwic3Bpbm5lclN0eWxlXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiY2lyY2xlXCIgKm5nRm9yPVwibGV0IGNzIG9mIGNpcmNsZXNTdHlsZXNcIiBbbmdTdHlsZV09XCJjc1wiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2lyY2xlLWlubmVyLWNvbnRhaW5lclwiIFtuZ1N0eWxlXT1cImNpcmNsZUlubmVyQ29udGFpbmVyU3R5bGVcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2lyY2xlLWlubmVyXCIgW25nU3R5bGVdPVwiY2lyY2xlSW5uZXJTdHlsZVwiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZVVybHM6IFsnLi9yYWRhci1zcGlubmVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBSYWRhclNwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgc2l6ZSA9IDExMDtcbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAyMDAwO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBwcml2YXRlIGNpcmNsZXNOdW0gPSA0O1xuXG4gIGdldCBib3JkZXJXaWR0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnNpemUgKiA1IC8gMTEwO1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuc2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5zaXplfXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlU3R5bGUoKTogb2JqZWN0IHtcbiAgICByZXR1cm4ge1xuICAgICAgYW5pbWF0aW9uRHVyYXRpb246IGAke3RoaXMuYW5pbWF0aW9uRHVyYXRpb259bXNgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGVJbm5lckNvbnRhaW5lclN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGJvcmRlcldpZHRoOiBgJHt0aGlzLmJvcmRlcldpZHRofXB4YFxuICAgIH07XG4gIH1cblxuICBnZXQgY2lyY2xlSW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBib3JkZXJMZWZ0Q29sb3I6IHRoaXMuY29sb3IsXG4gICAgICBib3JkZXJSaWdodENvbG9yOiB0aGlzLmNvbG9yLFxuICAgICAgYm9yZGVyV2lkdGg6IGAke3RoaXMuYm9yZGVyV2lkdGh9cHhgXG4gICAgfTtcbiAgfVxuXG4gIGdldCBjaXJjbGVzU3R5bGVzKCk6IG9iamVjdCB7XG4gICAgY29uc3QgY2lyY2xlc1N0eWxlcyA9IFtdO1xuICAgIGNvbnN0IGRlbGF5ID0gdGhpcy5hbmltYXRpb25EdXJhdGlvbiAqIDAuMTU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNpcmNsZXNOdW07IGkrKykge1xuICAgICAgY2lyY2xlc1N0eWxlcy5wdXNoKE9iamVjdC5hc3NpZ24oe1xuICAgICAgICBwYWRkaW5nOiBgJHt0aGlzLmJvcmRlcldpZHRoICogMiAqIGl9cHhgLFxuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7aSA9PT0gdGhpcy5jaXJjbGVzTnVtIC0gMSA/IDAgOiBkZWxheX1tc2BcbiAgICAgIH0sIHRoaXMuY2lyY2xlU3R5bGUpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNpcmNsZXNTdHlsZXM7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iXX0=