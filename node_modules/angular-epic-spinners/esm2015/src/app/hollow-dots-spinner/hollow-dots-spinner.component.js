/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class HollowDotsSpinnerComponent {
    constructor() {
        this.animationDuration = 1000;
        this.dotSize = 15;
        this.dotsNum = 3;
        this.color = '#fff';
    }
    /**
     * @return {?}
     */
    get horizontalMargin() {
        return this.dotSize / 2;
    }
    /**
     * @return {?}
     */
    get spinnerStyle() {
        return {
            height: `${this.dotSize}px`,
            width: `${this.dotSize}px`,
        };
    }
    /**
     * @return {?}
     */
    get dotStyle() {
        return {
            width: `${this.dotSize}px`,
            height: `${this.dotSize}px`,
            margin: `0 ${this.horizontalMargin}px`,
            borderWidth: `${this.dotSize / 5}px`,
            borderColor: this.color,
            animationDuration: `${this.animationDuration}ms`
        };
    }
    /**
     * @return {?}
     */
    get dotsStyles() {
        /** @type {?} */
        const dotsStyles = [];
        /** @type {?} */
        const delayModifier = 0.3;
        /** @type {?} */
        const basicDelay = 1000;
        for (let i = 1; i <= this.dotsNum; i++) {
            /** @type {?} */
            const style = Object.assign({}, this.dotStyle, { animationDelay: `${basicDelay * i * delayModifier}ms` });
            dotsStyles.push(style);
        }
        return dotsStyles;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
HollowDotsSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-hollow-dots-spinner',
                template: `
    <div class="hollow-dots-spinner" [ngStyle]="spinnerStyle">
      <div class="dot" *ngFor="let ds of dotsStyles" [ngStyle]="ds"></div>
    </div>
  `,
                styles: [".hollow-dots-spinner,.hollow-dots-spinner *{box-sizing:border-box}.hollow-dots-spinner{height:15px;width:calc(30px * 3)}.hollow-dots-spinner .dot{width:15px;height:15px;margin:0 calc(15px / 2);border:solid #ff1d5e;border-radius:50%;float:left;-webkit-transform:scale(0);transform:scale(0);-webkit-animation:1s infinite hollow-dots-spinner-animation;animation:1s infinite hollow-dots-spinner-animation}.hollow-dots-spinner .dot:nth-child(1){-webkit-animation-delay:calc(300ms * 1);animation-delay:calc(300ms * 1)}.hollow-dots-spinner .dot:nth-child(2){-webkit-animation-delay:calc(300ms * 2);animation-delay:calc(300ms * 2)}.hollow-dots-spinner .dot:nth-child(3){-webkit-animation-delay:calc(300ms * 3);animation-delay:calc(300ms * 3)}@-webkit-keyframes hollow-dots-spinner-animation{50%{-webkit-transform:scale(1);transform:scale(1);opacity:1}100%{opacity:0}}@keyframes hollow-dots-spinner-animation{50%{-webkit-transform:scale(1);transform:scale(1);opacity:1}100%{opacity:0}}"]
            }] }
];
/** @nocollapse */
HollowDotsSpinnerComponent.ctorParameters = () => [];
HollowDotsSpinnerComponent.propDecorators = {
    animationDuration: [{ type: Input }],
    dotSize: [{ type: Input }],
    dotsNum: [{ type: Input }],
    color: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HollowDotsSpinnerComponent.prototype.animationDuration;
    /** @type {?} */
    HollowDotsSpinnerComponent.prototype.dotSize;
    /** @type {?} */
    HollowDotsSpinnerComponent.prototype.dotsNum;
    /** @type {?} */
    HollowDotsSpinnerComponent.prototype.color;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG9sbG93LWRvdHMtc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLWVwaWMtc3Bpbm5lcnMvIiwic291cmNlcyI6WyJzcmMvYXBwL2hvbGxvdy1kb3RzLXNwaW5uZXIvaG9sbG93LWRvdHMtc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBV3pELE1BQU0sT0FBTywwQkFBMEI7SUFFckM7UUFHUyxzQkFBaUIsR0FBRyxJQUFJLENBQUM7UUFDekIsWUFBTyxHQUFHLEVBQUUsQ0FBQztRQUNiLFlBQU8sR0FBRyxDQUFDLENBQUM7UUFDWixVQUFLLEdBQUcsTUFBTSxDQUFDO0lBTHhCLENBQUM7Ozs7SUFPRCxJQUFJLGdCQUFnQjtRQUNsQixPQUFPLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxJQUFJLFlBQVk7UUFDZCxPQUFPO1lBQ0wsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSTtZQUMzQixLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsT0FBTyxJQUFJO1NBQzNCLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsSUFBSSxRQUFRO1FBQ1YsT0FBTztZQUNMLEtBQUssRUFBRSxHQUFHLElBQUksQ0FBQyxPQUFPLElBQUk7WUFDMUIsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sSUFBSTtZQUMzQixNQUFNLEVBQUUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLElBQUk7WUFDdEMsV0FBVyxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUk7WUFDcEMsV0FBVyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3ZCLGlCQUFpQixFQUFFLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixJQUFJO1NBQ2pELENBQUM7SUFDSixDQUFDOzs7O0lBRUQsSUFBSSxVQUFVOztjQUNOLFVBQVUsR0FBRyxFQUFFOztjQUNmLGFBQWEsR0FBRyxHQUFHOztjQUNuQixVQUFVLEdBQUcsSUFBSTtRQUV2QixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsRUFBRTs7a0JBQ2hDLEtBQUsscUJBQ04sSUFBSSxDQUFDLFFBQVEsSUFDaEIsY0FBYyxFQUFFLEdBQUcsVUFBVSxHQUFHLENBQUMsR0FBRyxhQUFhLElBQUksR0FDdEQ7WUFFRCxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7OztJQUVELFFBQVE7SUFDUixDQUFDOzs7WUEzREYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5QkFBeUI7Z0JBQ25DLFFBQVEsRUFBRTs7OztHQUlUOzthQUVGOzs7OztnQ0FNRSxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSztvQkFDTCxLQUFLOzs7O0lBSE4sdURBQWtDOztJQUNsQyw2Q0FBc0I7O0lBQ3RCLDZDQUFxQjs7SUFDckIsMkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2FwcC1ob2xsb3ctZG90cy1zcGlubmVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiaG9sbG93LWRvdHMtc3Bpbm5lclwiIFtuZ1N0eWxlXT1cInNwaW5uZXJTdHlsZVwiPlxuICAgICAgPGRpdiBjbGFzcz1cImRvdFwiICpuZ0Zvcj1cImxldCBkcyBvZiBkb3RzU3R5bGVzXCIgW25nU3R5bGVdPVwiZHNcIj48L2Rpdj5cbiAgICA8L2Rpdj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vaG9sbG93LWRvdHMtc3Bpbm5lci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgSG9sbG93RG90c1NwaW5uZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICB9XG5cbiAgQElucHV0KCkgYW5pbWF0aW9uRHVyYXRpb24gPSAxMDAwO1xuICBASW5wdXQoKSBkb3RTaXplID0gMTU7XG4gIEBJbnB1dCgpIGRvdHNOdW0gPSAzO1xuICBASW5wdXQoKSBjb2xvciA9ICcjZmZmJztcblxuICBnZXQgaG9yaXpvbnRhbE1hcmdpbigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmRvdFNpemUgLyAyO1xuICB9XG5cbiAgZ2V0IHNwaW5uZXJTdHlsZSgpOiBvYmplY3Qge1xuICAgIHJldHVybiB7XG4gICAgICBoZWlnaHQ6IGAke3RoaXMuZG90U2l6ZX1weGAsXG4gICAgICB3aWR0aDogYCR7dGhpcy5kb3RTaXplfXB4YCxcbiAgICB9O1xuICB9XG5cbiAgZ2V0IGRvdFN0eWxlKCk6IG9iamVjdCB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBgJHt0aGlzLmRvdFNpemV9cHhgLFxuICAgICAgaGVpZ2h0OiBgJHt0aGlzLmRvdFNpemV9cHhgLFxuICAgICAgbWFyZ2luOiBgMCAke3RoaXMuaG9yaXpvbnRhbE1hcmdpbn1weGAsXG4gICAgICBib3JkZXJXaWR0aDogYCR7dGhpcy5kb3RTaXplIC8gNX1weGAsXG4gICAgICBib3JkZXJDb2xvcjogdGhpcy5jb2xvcixcbiAgICAgIGFuaW1hdGlvbkR1cmF0aW9uOiBgJHt0aGlzLmFuaW1hdGlvbkR1cmF0aW9ufW1zYFxuICAgIH07XG4gIH1cblxuICBnZXQgZG90c1N0eWxlcygpOiBvYmplY3Qge1xuICAgIGNvbnN0IGRvdHNTdHlsZXMgPSBbXTtcbiAgICBjb25zdCBkZWxheU1vZGlmaWVyID0gMC4zO1xuICAgIGNvbnN0IGJhc2ljRGVsYXkgPSAxMDAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gdGhpcy5kb3RzTnVtOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0eWxlID0ge1xuICAgICAgICAuLi50aGlzLmRvdFN0eWxlLFxuICAgICAgICBhbmltYXRpb25EZWxheTogYCR7YmFzaWNEZWxheSAqIGkgKiBkZWxheU1vZGlmaWVyfW1zYFxuICAgICAgfTtcblxuICAgICAgZG90c1N0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZG90c1N0eWxlcztcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiJdfQ==